
package com.rolmex.android.oa.ws;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.4
//
// Date Of Creation: 4/7/2013 9:45:52 AM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import com.rolmex.android.oa.ws.WS_Enums.SoapProtocolVersion;

import org.ksoap2.HeaderProperty;
import org.ksoap2.SoapEnvelope;
import org.ksoap2.SoapFault;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;
import org.ksoap2.serialization.SoapSerializationEnvelope;
import org.ksoap2.transport.HttpTransportSE;

import android.os.AsyncTask;

import java.util.List;

public class LoginService {

    public String NAMESPACE = "http://tempuri.org/";

    public String url = "";

    public int timeOut = 60000;

    public IWsdl2CodeEvents eventHandler;

    public SoapProtocolVersion soapVersion;

    public LoginService() {
    }

    public LoginService(IWsdl2CodeEvents eventHandler) {
        this.eventHandler = eventHandler;
    }

    public LoginService(IWsdl2CodeEvents eventHandler, String url) {
        this.eventHandler = eventHandler;
        this.url = url;
    }

    public LoginService(IWsdl2CodeEvents eventHandler, String url, int timeOutInSeconds) {
        this.eventHandler = eventHandler;
        this.url = url;
        this.setTimeOut(timeOutInSeconds);
    }

    public void setTimeOut(int seconds) {
        this.timeOut = seconds * 1000;
    }

    public void setUrl(String url) {
        this.url = url;
    }

    public void UserGetIPKeyServiceAsync(String logType, String userName, String strReqMsg,
            String strSignMsg, String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        UserGetIPKeyServiceAsync(logType, userName, strReqMsg, strSignMsg, strApkNo, null);
    }

    public void UserGetIPKeyServiceAsync(final String logType, final String userName,
            final String strReqMsg, final String strSignMsg, final String strApkNo,
            final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };

            @Override
            protected String doInBackground(Void... params) {
                return UserGetIPKeyService(logType, userName, strReqMsg, strSignMsg, strApkNo,
                        headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("UserGetIPKeyService", result);
                }
            }
        }.execute();
    }

    public String UserGetIPKeyService(String logType, String userName, String strReqMsg,
            String strSignMsg, String strApkNo) {
        return UserGetIPKeyService(logType, userName, strReqMsg, strSignMsg, strApkNo, null);
    }

    public String UserGetIPKeyService(String logType, String userName, String strReqMsg,
            String strSignMsg, String strApkNo, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "UserGetIPKeyService");
        soapReq.addProperty("logType", logType);
        soapReq.addProperty("userName", userName);
        soapReq.addProperty("strReqMsg", strReqMsg);
        soapReq.addProperty("strSignMsg", strSignMsg);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/UserGetIPKeyService", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/UserGetIPKeyService", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject)retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive)obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String)obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public String GetAuthToken(String strUserID, String strSignMsg, String strApkNo) {
        return GetAuthToken(strUserID, strSignMsg, strApkNo, null);
    }

    public String GetAuthToken(String strUserID, String strSignMsg, String strApkNo,
            List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "GetAuthToken");
        soapReq.addProperty("strUserID", strUserID);
        soapReq.addProperty("strSignMsg", strSignMsg);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/GetAuthToken", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/GetAuthToken", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject)retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive)obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String)obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void CheckUpdateAsync(int appID, int version, String strSignMsg) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        CheckUpdateAsync(appID, version, strSignMsg, null);
    }

    public void CheckUpdateAsync(final int appID, final int version, final String strSignMsg,
            final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };

            @Override
            protected String doInBackground(Void... params) {
                return CheckUpdate(appID, version, strSignMsg, headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("CheckUpdate", result);
                }
            }
        }.execute();
    }

    public String CheckUpdate(int appID, int version, String strSignMsg) {
        return CheckUpdate(appID, version, strSignMsg, null);
    }

    public String CheckUpdate(int appID, int version, String strSignMsg,
            List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "CheckUpdate");
        soapReq.addProperty("AppID", appID);
        soapReq.addProperty("Version", version);
        soapReq.addProperty("strSignMsg", strSignMsg);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/CheckUpdate", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/CheckUpdate", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject)retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive)obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String)obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void SearchAllAppAsync(int intRandom, String strSignMsg) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        SearchAllAppAsync(intRandom, strSignMsg, null);
    }

    public void SearchAllAppAsync(final int intRandom, final String strSignMsg,
            final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };

            @Override
            protected String doInBackground(Void... params) {
                return SearchAllApp(intRandom, strSignMsg, headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("SearchAllApp", result);
                }
            }
        }.execute();
    }

    public String SearchAllApp(int intRandom, String strSignMsg) {
        return SearchAllApp(intRandom, strSignMsg, null);
    }

    public String SearchAllApp(int intRandom, String strSignMsg, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "SearchAllApp");
        soapReq.addProperty("intRandom", intRandom);
        soapReq.addProperty("strSignMsg", strSignMsg);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/SearchAllApp", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/SearchAllApp", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject)retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive)obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String)obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public String MobilePlatformOperate(String strUserID, String strBrand, String strModel,
            String strManufacturer, String strCpuABI, int intVersionSDK, String strVersionRelease,
            String strSignMsg, String strApkNo) {
        return MobilePlatformOperate(strUserID, strBrand, strModel, strManufacturer, strCpuABI,
                intVersionSDK, strVersionRelease, strSignMsg, strApkNo, null);
    }

    public String MobilePlatformOperate(String strUserID, String strBrand, String strModel,
            String strManufacturer, String strCpuABI, int intVersionSDK, String strVersionRelease,
            String strSignMsg, String strApkNo, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "MobilePlatformOperate");
        soapReq.addProperty("strUserID", strUserID);
        soapReq.addProperty("strBrand", strBrand);
        soapReq.addProperty("strModel", strModel);
        soapReq.addProperty("strManufacturer", strManufacturer);
        soapReq.addProperty("strCpuABI", strCpuABI);
        soapReq.addProperty("intVersionSDK", intVersionSDK);
        soapReq.addProperty("strVersionRelease", strVersionRelease);
        soapReq.addProperty("strSignMsg", strSignMsg);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/MobilePlatformOperate", soapEnvelope,
                        headers);
            } else {
                httpTransport.call("http://tempuri.org/MobilePlatformOperate", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject)retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive)obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String)obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }
}
