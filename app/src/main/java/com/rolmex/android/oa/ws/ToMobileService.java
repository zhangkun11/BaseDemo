package com.rolmex.android.oa.ws;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.5
//
// Date Of Creation: 5/19/2014 11:56:21 AM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//

import android.os.AsyncTask;
import android.util.Log;

import com.rolmex.android.oa.ws.WS_Enums.SoapProtocolVersion;

import org.ksoap2.HeaderProperty;
import org.ksoap2.SoapEnvelope;
import org.ksoap2.SoapFault;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;
import org.ksoap2.serialization.SoapSerializationEnvelope;
import org.ksoap2.transport.HttpTransportSE;

import java.util.List;

public class ToMobileService {

    public String NAMESPACE = "http://tempuri.org/";

    public String url = "";

    public int timeOut = 60000;

    public IWsdl2CodeEvents eventHandler;

    public SoapProtocolVersion soapVersion;

    public ToMobileService() {
    }

    public ToMobileService(IWsdl2CodeEvents eventHandler) {
        this.eventHandler = eventHandler;
    }

    public ToMobileService(IWsdl2CodeEvents eventHandler, String url) {
        this.eventHandler = eventHandler;
        this.url = url;
    }

    public ToMobileService(IWsdl2CodeEvents eventHandler, String url, int timeOutInSeconds) {
        this.eventHandler = eventHandler;
        this.url = url;
        this.setTimeOut(timeOutInSeconds);
    }

    public void setTimeOut(int seconds) {
        this.timeOut = seconds * 1000;
    }

    public void setUrl(String url) {
        this.url = url;
    }

    private SoapSerializationEnvelope createSoapSerializationEnvelope() {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        MarshalDouble marshaldDouble = new MarshalDouble();
        marshaldDouble.register(soapEnvelope);
        return soapEnvelope;
    }

    public void UpdateGenerationAsync(String varUID, String intEraNum, String strMsg,
                                      String strAuthorizationCode, String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        UpdateGenerationAsync(varUID, intEraNum, strMsg, strAuthorizationCode, strApkNo, null);
    }

    public void UpdateGenerationAsync(final String varUID, final String intEraNum,
                                      final String strMsg, final String strAuthorizationCode, final String strApkNo,
                                      final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return UpdateGeneration(varUID, intEraNum, strMsg, strAuthorizationCode, strApkNo,
                        headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("UpdateGeneration", result);
                }
            }
        }.execute();
    }

    public String UpdateGeneration(String varUID, String intEraNum, String strMsg,
                                   String strAuthorizationCode, String strApkNo) {
        return UpdateGeneration(varUID, intEraNum, strMsg, strAuthorizationCode, strApkNo, null);
    }

    public String UpdateGeneration(String varUID, String intEraNum, String strMsg,
                                   String strAuthorizationCode, String strApkNo, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "UpdateGeneration");
        soapReq.addProperty("varUID", varUID);
        soapReq.addProperty("intEraNum", intEraNum);
        soapReq.addProperty("strMsg", strMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/UpdateGeneration", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/UpdateGeneration", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void UpdateMsgTipAsync(String varUID, String intIsMobSer, String strMsg,
                                  String strAuthorizationCode, String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        UpdateMsgTipAsync(varUID, intIsMobSer, strMsg, strAuthorizationCode, strApkNo, null);
    }

    public void UpdateMsgTipAsync(final String varUID, final String intIsMobSer,
                                  final String strMsg, final String strAuthorizationCode, final String strApkNo,
                                  final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return UpdateMsgTip(varUID, intIsMobSer, strMsg, strAuthorizationCode, strApkNo,
                        headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("UpdateMsgTip", result);
                }
            }
        }.execute();
    }

    public String UpdateMsgTip(String varUID, String intIsMobSer, String strMsg,
                               String strAuthorizationCode, String strApkNo) {
        return UpdateMsgTip(varUID, intIsMobSer, strMsg, strAuthorizationCode, strApkNo, null);
    }

    public String UpdateMsgTip(String varUID, String intIsMobSer, String strMsg,
                               String strAuthorizationCode, String strApkNo, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "UpdateMsgTip");
        soapReq.addProperty("varUID", varUID);
        soapReq.addProperty("intIsMobSer", intIsMobSer);
        soapReq.addProperty("strMsg", strMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/UpdateMsgTip", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/UpdateMsgTip", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void SearchMyOrdersToMobileAsync(String varUID, String search, String pageSize,
                                            String pageIndex, String strMsg, String strAuthorizationCode, String strApkNo)
            throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        SearchMyOrdersToMobileAsync(varUID, search, pageSize, pageIndex, strMsg,
                strAuthorizationCode, strApkNo, null);
    }

    public void SearchMyOrdersToMobileAsync(final String varUID, final String search,
                                            final String pageSize, final String pageIndex, final String strMsg,
                                            final String strAuthorizationCode, final String strApkNo,
                                            final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return SearchMyOrdersToMobile(varUID, search, pageSize, pageIndex, strMsg,
                        strAuthorizationCode, strApkNo, headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("SearchMyOrdersToMobile", result);
                }
            }
        }.execute();
    }

    public String SearchMyOrdersToMobile(String varUID, String search, String pageSize,
                                         String pageIndex, String strMsg, String strAuthorizationCode, String strApkNo) {
        return SearchMyOrdersToMobile(varUID, search, pageSize, pageIndex, strMsg,
                strAuthorizationCode, strApkNo, null);
    }

    public String SearchMyOrdersToMobile(String varUID, String search, String pageSize,
                                         String pageIndex, String strMsg, String strAuthorizationCode, String strApkNo,
                                         List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "SearchMyOrdersToMobile");
        soapReq.addProperty("varUID", varUID);
        soapReq.addProperty("search", search);
        soapReq.addProperty("pageSize", pageSize);
        soapReq.addProperty("pageIndex", pageIndex);
        soapReq.addProperty("strMsg", strMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/SearchMyOrdersToMobile", soapEnvelope,
                        headers);
            } else {
                httpTransport.call("http://tempuri.org/SearchMyOrdersToMobile", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void SearchShopOrdersToMobileAsync(String varUserID, String search, String pageSize,
                                              String pageIndex, String strMsg, String strAuthorizationCode, String strApkNo)
            throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        SearchShopOrdersToMobileAsync(varUserID, search, pageSize, pageIndex, strMsg,
                strAuthorizationCode, strApkNo, null);
    }

    public void SearchShopOrdersToMobileAsync(final String varUserID, final String search,
                                              final String pageSize, final String pageIndex, final String strMsg,
                                              final String strAuthorizationCode, final String strApkNo,
                                              final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return SearchShopOrdersToMobile(varUserID, search, pageSize, pageIndex, strMsg,
                        strAuthorizationCode, strApkNo, headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("SearchShopOrdersToMobile", result);
                }
            }
        }.execute();
    }

    public String SearchShopOrdersToMobile(String varUserID, String search, String pageSize,
                                           String pageIndex, String strMsg, String strAuthorizationCode, String strApkNo) {
        return SearchShopOrdersToMobile(varUserID, search, pageSize, pageIndex, strMsg,
                strAuthorizationCode, strApkNo, null);
    }

    public String SearchShopOrdersToMobile(String varUserID, String search, String pageSize,
                                           String pageIndex, String strMsg, String strAuthorizationCode, String strApkNo,
                                           List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "SearchShopOrdersToMobile");
        soapReq.addProperty("varUserID", varUserID);
        soapReq.addProperty("search", search);
        soapReq.addProperty("pageSize", pageSize);
        soapReq.addProperty("pageIndex", pageIndex);
        soapReq.addProperty("strMsg", strMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/SearchShopOrdersToMobile", soapEnvelope,
                        headers);
            } else {
                httpTransport.call("http://tempuri.org/SearchShopOrdersToMobile", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void SearchOrderComToMobileAsync(String varUID, String search, String orderType,
                                            String status, String pageSize, String pageIndex, String strMsg,
                                            String strAuthorizationCode, String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        SearchOrderComToMobileAsync(varUID, search, orderType, status, pageSize, pageIndex, strMsg,
                strAuthorizationCode, strApkNo, null);
    }

    public void SearchOrderComToMobileAsync(final String varUID, final String search,
                                            final String orderType, final String status, final String pageSize,
                                            final String pageIndex, final String strMsg, final String strAuthorizationCode,
                                            final String strApkNo, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return SearchOrderComToMobile(varUID, search, orderType, status, pageSize,
                        pageIndex, strMsg, strAuthorizationCode, strApkNo, headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("SearchOrderComToMobile", result);
                }
            }
        }.execute();
    }

    public String SearchOrderComToMobile(String varUID, String search, String orderType,
                                         String status, String pageSize, String pageIndex, String strMsg,
                                         String strAuthorizationCode, String strApkNo) {
        return SearchOrderComToMobile(varUID, search, orderType, status, pageSize, pageIndex,
                strMsg, strAuthorizationCode, strApkNo, null);
    }

    public String SearchOrderComToMobile(String varUID, String search, String orderType,
                                         String status, String pageSize, String pageIndex, String strMsg,
                                         String strAuthorizationCode, String strApkNo, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "SearchOrderComToMobile");
        soapReq.addProperty("varUID", varUID);
        soapReq.addProperty("search", search);
        soapReq.addProperty("orderType", orderType);
        soapReq.addProperty("status", status);
        soapReq.addProperty("pageSize", pageSize);
        soapReq.addProperty("pageIndex", pageIndex);
        soapReq.addProperty("strMsg", strMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/SearchOrderComToMobile", soapEnvelope,
                        headers);
            } else {
                httpTransport.call("http://tempuri.org/SearchOrderComToMobile", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void SearchRecomendListToMobileAsync(String varUserID, String search, String pageSize,
                                                String pageIndex, String strMsg, String strAuthorizationCode, String varUID,
                                                String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        SearchRecomendListToMobileAsync(varUserID, search, pageSize, pageIndex, strMsg,
                strAuthorizationCode, varUID, strApkNo, null);
    }

    public void SearchRecomendListToMobileAsync(final String varUserID, final String search,
                                                final String pageSize, final String pageIndex, final String strMsg,
                                                final String strAuthorizationCode, final String varUID, final String strApkNo,
                                                final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return SearchRecomendListToMobile(varUserID, search, pageSize, pageIndex, strMsg,
                        strAuthorizationCode, varUID, strApkNo, headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("SearchRecomendListToMobile", result);
                }
            }
        }.execute();
    }

    public String SearchRecomendListToMobile(String varUserID, String search, String pageSize,
                                             String pageIndex, String strMsg, String strAuthorizationCode, String varUID,
                                             String strApkNo) {
        return SearchRecomendListToMobile(varUserID, search, pageSize, pageIndex, strMsg,
                strAuthorizationCode, varUID, strApkNo, null);
    }

    public String SearchRecomendListToMobile(String varUserID, String search, String pageSize,
                                             String pageIndex, String strMsg, String strAuthorizationCode, String varUID,
                                             String strApkNo, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "SearchRecomendListToMobile");
        soapReq.addProperty("varUserID", varUserID);
        soapReq.addProperty("search", search);
        soapReq.addProperty("pageSize", pageSize);
        soapReq.addProperty("pageIndex", pageIndex);
        soapReq.addProperty("strMsg", strMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("varUID", varUID);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/SearchRecomendListToMobile", soapEnvelope,
                        headers);
            } else {
                httpTransport.call("http://tempuri.org/SearchRecomendListToMobile", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public String SearchSalesListToMobilePlain(String varUserID, String varLoginUID,
                                               String isSearch, String strMsg, String strAuthorizationCode, String strApkNo) {
        return SearchSalesListToMobilePlain(varUserID, varLoginUID, isSearch, strMsg,
                strAuthorizationCode, strApkNo, null);
    }

    public String SearchSalesListToMobilePlain(String varUserID, String varLoginUID,
                                               String isSearch, String strMsg, String strAuthorizationCode, String strApkNo,
                                               List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "SearchSalesListToMobilePlain");
        soapReq.addProperty("varUserID", varUserID);
        soapReq.addProperty("varLoginUID", varLoginUID);
        soapReq.addProperty("isSearch", isSearch);
        soapReq.addProperty("strMsg", strMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/SearchSalesListToMobilePlain", soapEnvelope,
                        headers);
            } else {
                httpTransport.call("http://tempuri.org/SearchSalesListToMobilePlain", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public String SearchSalesListToMoblieShop(String varUserID, String varLoginUID,
                                              String isSearch, String strMsg, String strAuthorizationCode, String strApkNo) {
        return SearchSalesListToMoblieShop(varUserID, varLoginUID, isSearch, strMsg,
                strAuthorizationCode, strApkNo, null);
    }

    public String SearchSalesListToMoblieShop(String varUserID, String varLoginUID,
                                              String isSearch, String strMsg, String strAuthorizationCode, String strApkNo,
                                              List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "SearchSalesListToMoblieShop");
        soapReq.addProperty("varUserID", varUserID);
        soapReq.addProperty("varLoginUID", varLoginUID);
        soapReq.addProperty("isSearch", isSearch);
        soapReq.addProperty("strMsg", strMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/SearchSalesListToMoblieShop", soapEnvelope,
                        headers);
            } else {
                httpTransport.call("http://tempuri.org/SearchSalesListToMoblieShop", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void SearchBottomListToMobile_ShopAsync(String varUserID, String strMsg,
                                                   String strAuthorizationCode, String varUID, String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        SearchBottomListToMobile_ShopAsync(varUserID, strMsg, strAuthorizationCode, varUID,
                strApkNo, null);
    }

    public void SearchBottomListToMobile_ShopAsync(final String varUserID, final String strMsg,
                                                   final String strAuthorizationCode, final String varUID, final String strApkNo,
                                                   final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return SearchBottomListToMobile_Shop(varUserID, strMsg, strAuthorizationCode,
                        varUID, strApkNo, headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("SearchBottomListToMobile_Shop", result);
                }
            }
        }.execute();
    }

    public String SearchBottomListToMobile_Shop(String varUserID, String strMsg,
                                                String strAuthorizationCode, String varUID, String strApkNo) {
        return SearchBottomListToMobile_Shop(varUserID, strMsg, strAuthorizationCode, varUID,
                strApkNo, null);
    }

    public String SearchBottomListToMobile_Shop(String varUserID, String strMsg,
                                                String strAuthorizationCode, String varUID, String strApkNo,
                                                List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "SearchBottomListToMobile_Shop");
        soapReq.addProperty("varUserID", varUserID);
        soapReq.addProperty("strMsg", strMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("varUID", varUID);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/SearchBottomListToMobile_Shop",
                        soapEnvelope, headers);
            } else {
                httpTransport
                        .call("http://tempuri.org/SearchBottomListToMobile_Shop", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void SearchBottomListToMobile_PlainAsync(String varUserID, String strMsg,
                                                    String strAuthorizationCode, String varUID, String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        SearchBottomListToMobile_PlainAsync(varUserID, strMsg, strAuthorizationCode, varUID,
                strApkNo, null);
    }

    public void SearchBottomListToMobile_PlainAsync(final String varUserID, final String strMsg,
                                                    final String strAuthorizationCode, final String varUID, final String strApkNo,
                                                    final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return SearchBottomListToMobile_Plain(varUserID, strMsg, strAuthorizationCode,
                        varUID, strApkNo, headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("SearchBottomListToMobile_Plain", result);
                }
            }
        }.execute();
    }

    public String SearchBottomListToMobile_Plain(String varUserID, String strMsg,
                                                 String strAuthorizationCode, String varUID, String strApkNo) {
        return SearchBottomListToMobile_Plain(varUserID, strMsg, strAuthorizationCode, varUID,
                strApkNo, null);
    }

    public String SearchBottomListToMobile_Plain(String varUserID, String strMsg,
                                                 String strAuthorizationCode, String varUID, String strApkNo,
                                                 List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "SearchBottomListToMobile_Plain");
        soapReq.addProperty("varUserID", varUserID);
        soapReq.addProperty("strMsg", strMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("varUID", varUID);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/SearchBottomListToMobile_Plain",
                        soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/SearchBottomListToMobile_Plain",
                        soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void OrderCompanyDetailAsync(String varOrderNo, String strMsg,
                                        String strAuthorizationCode, String varUID, String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        OrderCompanyDetailAsync(varOrderNo, strMsg, strAuthorizationCode, varUID, strApkNo, null);
    }

    public void OrderCompanyDetailAsync(final String varOrderNo, final String strMsg,
                                        final String strAuthorizationCode, final String varUID, final String strApkNo,
                                        final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return OrderCompanyDetail(varOrderNo, strMsg, strAuthorizationCode, varUID,
                        strApkNo, headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("OrderCompanyDetail", result);
                }
            }
        }.execute();
    }

    public String OrderCompanyDetail(String varOrderNo, String strMsg, String strAuthorizationCode,
                                     String varUID, String strApkNo) {
        return OrderCompanyDetail(varOrderNo, strMsg, strAuthorizationCode, varUID, strApkNo, null);
    }

    public String OrderCompanyDetail(String varOrderNo, String strMsg, String strAuthorizationCode,
                                     String varUID, String strApkNo, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "OrderCompanyDetail");
        soapReq.addProperty("varOrderNo", varOrderNo);
        soapReq.addProperty("strMsg", strMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("varUID", varUID);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/OrderCompanyDetail", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/OrderCompanyDetail", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public String OrderSalesDetail(String varOrderNo, String strOrderType, String strMsg,
                                   String strAuthorizationCode, String varUID, String strApkNo,
                                   List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "OrderSalesDetail");
        soapReq.addProperty("varOrderNo", varOrderNo);
        soapReq.addProperty("strOrderType", strOrderType);
        soapReq.addProperty("strMsg", strMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("varUID", varUID);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/OrderSalesDetail", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/OrderSalesDetail", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void GetRecomendUserInfoAsync(String varUID, String strMsg, String strAuthorizationCode,
                                         String varLoginUID, String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetRecomendUserInfoAsync(varUID, strMsg, strAuthorizationCode, varLoginUID, strApkNo, null);
    }

    public void GetRecomendUserInfoAsync(final String varUID, final String strMsg,
                                         final String strAuthorizationCode, final String varLoginUID, final String strApkNo,
                                         final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return GetRecomendUserInfo(varUID, strMsg, strAuthorizationCode, varLoginUID,
                        strApkNo, headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("GetRecomendUserInfo", result);
                }
            }
        }.execute();
    }

    public String GetRecomendUserInfo(String varUID, String strMsg, String strAuthorizationCode,
                                      String varLoginUID, String strApkNo) {
        return GetRecomendUserInfo(varUID, strMsg, strAuthorizationCode, varLoginUID, strApkNo,
                null);
    }

    public String GetRecomendUserInfo(String varUID, String strMsg, String strAuthorizationCode,
                                      String varLoginUID, String strApkNo, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "GetRecomendUserInfo");
        soapReq.addProperty("varUID", varUID);
        soapReq.addProperty("strMsg", strMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("varLoginUID", varLoginUID);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/GetRecomendUserInfo", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/GetRecomendUserInfo", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void GetUserInfoAsync(String varUID, String strMsg, String strAuthorizationCode,
                                 String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetUserInfoAsync(varUID, strMsg, strAuthorizationCode, strApkNo, null);
    }

    public void GetUserInfoAsync(final String varUID, final String strMsg,
                                 final String strAuthorizationCode, final String strApkNo,
                                 final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return GetUserInfo(varUID, strMsg, strAuthorizationCode, strApkNo, headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("GetUserInfo", result);
                }
            }
        }.execute();
    }

    public String GetUserInfo(String varUID, String strMsg, String strAuthorizationCode,
                              String strApkNo) {
        return GetUserInfo(varUID, strMsg, strAuthorizationCode, strApkNo, null);
    }

    public String GetUserInfo(String varUID, String strMsg, String strAuthorizationCode,
                              String strApkNo, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "GetUserInfo");
        soapReq.addProperty("varUID", varUID);
        soapReq.addProperty("strMsg", strMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/GetUserInfo", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/GetUserInfo", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void UpdateUserInfoAsync(String varUID, String varNicName, String varZipCode,
                                    String varEmail, String varMobile, String varTelephone, String intProvince,
                                    String intCity, String intCounty, String varUserAddress, String dtmBirthday,
                                    String chrSex, String varBankName, String varBankNO, String intBankProvince,
                                    String intBankCity, String intBankCounty, String varBankAddress, String opPWD,
                                    String strMsg, String strAuthorizationCode, String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        UpdateUserInfoAsync(varUID, varNicName, varZipCode, varEmail, varMobile, varTelephone,
                intProvince, intCity, intCounty, varUserAddress, dtmBirthday, chrSex, varBankName,
                varBankNO, intBankProvince, intBankCity, intBankCounty, varBankAddress, opPWD,
                strMsg, strAuthorizationCode, strApkNo, null);
    }

    public void UpdateUserInfoAsync(final String varUID, final String varNicName,
                                    final String varZipCode, final String varEmail, final String varMobile,
                                    final String varTelephone, final String intProvince, final String intCity,
                                    final String intCounty, final String varUserAddress, final String dtmBirthday,
                                    final String chrSex, final String varBankName, final String varBankNO,
                                    final String intBankProvince, final String intBankCity, final String intBankCounty,
                                    final String varBankAddress, final String opPWD, final String strMsg,
                                    final String strAuthorizationCode, final String strApkNo,
                                    final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return UpdateUserInfo(varUID, varNicName, varZipCode, varEmail, varMobile,
                        varTelephone, intProvince, intCity, intCounty, varUserAddress, dtmBirthday,
                        chrSex, varBankName, varBankNO, intBankProvince, intBankCity,
                        intBankCounty, varBankAddress, opPWD, strMsg, strAuthorizationCode,
                        strApkNo, headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("UpdateUserInfo", result);
                }
            }
        }.execute();
    }

    public String UpdateUserInfo(String varUID, String varNicName, String varZipCode,
                                 String varEmail, String varMobile, String varTelephone, String intProvince,
                                 String intCity, String intCounty, String varUserAddress, String dtmBirthday,
                                 String chrSex, String varBankName, String varBankNO, String intBankProvince,
                                 String intBankCity, String intBankCounty, String varBankAddress, String opPWD,
                                 String strMsg, String strAuthorizationCode, String strApkNo) {
        return UpdateUserInfo(varUID, varNicName, varZipCode, varEmail, varMobile, varTelephone,
                intProvince, intCity, intCounty, varUserAddress, dtmBirthday, chrSex, varBankName,
                varBankNO, intBankProvince, intBankCity, intBankCounty, varBankAddress, opPWD,
                strMsg, strAuthorizationCode, strApkNo, null);
    }

    public String UpdateUserInfo(String varUID, String varNicName, String varZipCode,
                                 String varEmail, String varMobile, String varTelephone, String intProvince,
                                 String intCity, String intCounty, String varUserAddress, String dtmBirthday,
                                 String chrSex, String varBankName, String varBankNO, String intBankProvince,
                                 String intBankCity, String intBankCounty, String varBankAddress, String opPWD,
                                 String strMsg, String strAuthorizationCode, String strApkNo,
                                 List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "UpdateUserInfo");
        soapReq.addProperty("varUID", varUID);
        soapReq.addProperty("varNicName", varNicName);
        soapReq.addProperty("varZipCode", varZipCode);
        soapReq.addProperty("varEmail", varEmail);
        soapReq.addProperty("varMobile", varMobile);
        soapReq.addProperty("varTelephone", varTelephone);
        soapReq.addProperty("intProvince", intProvince);
        soapReq.addProperty("intCity", intCity);
        soapReq.addProperty("intCounty", intCounty);
        soapReq.addProperty("varUserAddress", varUserAddress);
        soapReq.addProperty("dtmBirthday", dtmBirthday);
        soapReq.addProperty("chrSex", chrSex);
        soapReq.addProperty("varBankName", varBankName);
        soapReq.addProperty("varBankNO", varBankNO);
        soapReq.addProperty("intBankProvince", intBankProvince);
        soapReq.addProperty("intBankCity", intBankCity);
        soapReq.addProperty("intBankCounty", intBankCounty);
        soapReq.addProperty("varBankAddress", varBankAddress);
        soapReq.addProperty("opPWD", opPWD);
        soapReq.addProperty("strMsg", strMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/UpdateUserInfo", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/UpdateUserInfo", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void ValidateSysStatusAsync(String varUID, String strMsg, String strAuthorizationCode,
                                       String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        ValidateSysStatusAsync(varUID, strMsg, strAuthorizationCode, strApkNo, null);
    }

    public void ValidateSysStatusAsync(final String varUID, final String strMsg,
                                       final String strAuthorizationCode, final String strApkNo,
                                       final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return ValidateSysStatus(varUID, strMsg, strAuthorizationCode, strApkNo, headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("ValidateSysStatus", result);
                }
            }
        }.execute();
    }

    public String ValidateSysStatus(String varUID, String strMsg, String strAuthorizationCode,
                                    String strApkNo) {
        return ValidateSysStatus(varUID, strMsg, strAuthorizationCode, strApkNo, null);
    }

    public String ValidateSysStatus(String varUID, String strMsg, String strAuthorizationCode,
                                    String strApkNo, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "ValidateSysStatus");
        soapReq.addProperty("varUID", varUID);
        soapReq.addProperty("strMsg", strMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/ValidateSysStatus", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/ValidateSysStatus", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void SearchWalletShopCenterByIDAsync(String strUID, String strMsg,
                                                String strAuthorizationCode, String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        SearchWalletShopCenterByIDAsync(strUID, strMsg, strAuthorizationCode, strApkNo, null);
    }

    public void SearchWalletShopCenterByIDAsync(final String strUID, final String strMsg,
                                                final String strAuthorizationCode, final String strApkNo,
                                                final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return SearchWalletShopCenterByID(strUID, strMsg, strAuthorizationCode, strApkNo,
                        headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("SearchWalletShopCenterByID", result);
                }
            }
        }.execute();
    }

    public String SearchWalletShopCenterByID(String strUID, String strMsg,
                                             String strAuthorizationCode, String strApkNo) {
        return SearchWalletShopCenterByID(strUID, strMsg, strAuthorizationCode, strApkNo, null);
    }

    public String SearchWalletShopCenterByID(String strUID, String strMsg,
                                             String strAuthorizationCode, String strApkNo, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "SearchWalletShopCenterByID");
        soapReq.addProperty("strUID", strUID);
        soapReq.addProperty("strMsg", strMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/SearchWalletShopCenterByID", soapEnvelope,
                        headers);
            } else {
                httpTransport.call("http://tempuri.org/SearchWalletShopCenterByID", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void InitPageForChargeAsync(String intRandom, String strMsg,
                                       String strAuthorizationCode, String varUID, String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        InitPageForChargeAsync(intRandom, strMsg, strAuthorizationCode, varUID, strApkNo, null);
    }

    public void InitPageForChargeAsync(final String intRandom, final String strMsg,
                                       final String strAuthorizationCode, final String varUID, final String strApkNo,
                                       final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return InitPageForCharge(intRandom, strMsg, strAuthorizationCode, varUID, strApkNo,
                        headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("InitPageForCharge", result);
                }
            }
        }.execute();
    }

    public String InitPageForCharge(String intRandom, String strMsg, String strAuthorizationCode,
                                    String varUID, String strApkNo) {
        return InitPageForCharge(intRandom, strMsg, strAuthorizationCode, varUID, strApkNo, null);
    }

    public String InitPageForCharge(String intRandom, String strMsg, String strAuthorizationCode,
                                    String varUID, String strApkNo, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "InitPageForCharge");
        soapReq.addProperty("intRandom", intRandom);
        soapReq.addProperty("strMsg", strMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("varUID", varUID);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/InitPageForCharge", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/InitPageForCharge", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void PageSearchChargeNoAuditListAsync(String strUID, String strType,
                                                 String strStartDate, String strEndDate, String intPageSize, String intPageIndex,
                                                 String strMsg, String strAuthorizationCode, String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        PageSearchChargeNoAuditListAsync(strUID, strType, strStartDate, strEndDate, intPageSize,
                intPageIndex, strMsg, strAuthorizationCode, strApkNo, null);
    }

    public void PageSearchChargeNoAuditListAsync(final String strUID, final String strType,
                                                 final String strStartDate, final String strEndDate, final String intPageSize,
                                                 final String intPageIndex, final String strMsg, final String strAuthorizationCode,
                                                 final String strApkNo, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return PageSearchChargeNoAuditList(strUID, strType, strStartDate, strEndDate,
                        intPageSize, intPageIndex, strMsg, strAuthorizationCode, strApkNo, headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("PageSearchChargeNoAuditList", result);
                }
            }
        }.execute();
    }

    public String PageSearchChargeNoAuditList(String strUID, String strType, String strStartDate,
                                              String strEndDate, String intPageSize, String intPageIndex, String strMsg,
                                              String strAuthorizationCode, String strApkNo) {
        return PageSearchChargeNoAuditList(strUID, strType, strStartDate, strEndDate, intPageSize,
                intPageIndex, strMsg, strAuthorizationCode, strApkNo, null);
    }

    public String PageSearchChargeNoAuditList(String strUID, String strType, String strStartDate,
                                              String strEndDate, String intPageSize, String intPageIndex, String strMsg,
                                              String strAuthorizationCode, String strApkNo, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "PageSearchChargeNoAuditList");
        soapReq.addProperty("strUID", strUID);
        soapReq.addProperty("strType", strType);
        soapReq.addProperty("strStartDate", strStartDate);
        soapReq.addProperty("strEndDate", strEndDate);
        soapReq.addProperty("intPageSize", intPageSize);
        soapReq.addProperty("intPageIndex", intPageIndex);
        soapReq.addProperty("strMsg", strMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/PageSearchChargeNoAuditList", soapEnvelope,
                        headers);
            } else {
                httpTransport.call("http://tempuri.org/PageSearchChargeNoAuditList", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void InitShopCenterTransListAsync(String intRandom, String strMsg,
                                             String strAuthorizationCode, String varUID, String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        InitShopCenterTransListAsync(intRandom, strMsg, strAuthorizationCode, varUID, strApkNo,
                null);
    }

    public void InitShopCenterTransListAsync(final String intRandom, final String strMsg,
                                             final String strAuthorizationCode, final String varUID, final String strApkNo,
                                             final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return InitShopCenterTransList(intRandom, strMsg, strAuthorizationCode, varUID,
                        strApkNo, headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("InitShopCenterTransList", result);
                }
            }
        }.execute();
    }

    public String InitShopCenterTransList(String intRandom, String strMsg,
                                          String strAuthorizationCode, String varUID, String strApkNo) {
        return InitShopCenterTransList(intRandom, strMsg, strAuthorizationCode, varUID, strApkNo,
                null);
    }

    public String InitShopCenterTransList(String intRandom, String strMsg,
                                          String strAuthorizationCode, String varUID, String strApkNo,
                                          List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "InitShopCenterTransList");
        soapReq.addProperty("intRandom", intRandom);
        soapReq.addProperty("strMsg", strMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("varUID", varUID);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/InitShopCenterTransList", soapEnvelope,
                        headers);
            } else {
                httpTransport.call("http://tempuri.org/InitShopCenterTransList", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void PageSearchShopCenterTransListAsync(String strUID, String strWalletType,
                                                   String strTradeType, String strStartDate, String strEndDate, String intPageSize,
                                                   String intPageIndex, String strMsg, String strAuthorizationCode, String strApkNo)
            throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        PageSearchShopCenterTransListAsync(strUID, strWalletType, strTradeType, strStartDate,
                strEndDate, intPageSize, intPageIndex, strMsg, strAuthorizationCode, strApkNo, null);
    }

    public void PageSearchShopCenterTransListAsync(final String strUID, final String strWalletType,
                                                   final String strTradeType, final String strStartDate, final String strEndDate,
                                                   final String intPageSize, final String intPageIndex, final String strMsg,
                                                   final String strAuthorizationCode, final String strApkNo,
                                                   final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return PageSearchShopCenterTransList(strUID, strWalletType, strTradeType,
                        strStartDate, strEndDate, intPageSize, intPageIndex, strMsg,
                        strAuthorizationCode, strApkNo, headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("PageSearchShopCenterTransList", result);
                }
            }
        }.execute();
    }

    public String PageSearchShopCenterTransList(String strUID, String strWalletType,
                                                String strTradeType, String strStartDate, String strEndDate, String intPageSize,
                                                String intPageIndex, String strMsg, String strAuthorizationCode, String strApkNo) {
        return PageSearchShopCenterTransList(strUID, strWalletType, strTradeType, strStartDate,
                strEndDate, intPageSize, intPageIndex, strMsg, strAuthorizationCode, strApkNo, null);
    }

    public String PageSearchShopCenterTransList(String strUID, String strWalletType,
                                                String strTradeType, String strStartDate, String strEndDate, String intPageSize,
                                                String intPageIndex, String strMsg, String strAuthorizationCode, String strApkNo,
                                                List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "PageSearchShopCenterTransList");
        soapReq.addProperty("strUID", strUID);
        soapReq.addProperty("strWalletType", strWalletType);
        soapReq.addProperty("strTradeType", strTradeType);
        soapReq.addProperty("strStartDate", strStartDate);
        soapReq.addProperty("strEndDate", strEndDate);
        soapReq.addProperty("intPageSize", intPageSize);
        soapReq.addProperty("intPageIndex", intPageIndex);
        soapReq.addProperty("strMsg", strMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/PageSearchShopCenterTransList",
                        soapEnvelope, headers);
            } else {
                httpTransport
                        .call("http://tempuri.org/PageSearchShopCenterTransList", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void PageSearchCustomerListAsync(String strUID, String intPageSize, String intPageIndex,
                                            String strMsg, String strAuthorizationCode, String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        PageSearchCustomerListAsync(strUID, intPageSize, intPageIndex, strMsg,
                strAuthorizationCode, strApkNo, null);
    }

    public void PageSearchCustomerListAsync(final String strUID, final String intPageSize,
                                            final String intPageIndex, final String strMsg, final String strAuthorizationCode,
                                            final String strApkNo, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return PageSearchCustomerList(strUID, intPageSize, intPageIndex, strMsg,
                        strAuthorizationCode, strApkNo, headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("PageSearchCustomerList", result);
                }
            }
        }.execute();
    }

    public String PageSearchCustomerList(String strUID, String intPageSize, String intPageIndex,
                                         String strMsg, String strAuthorizationCode, String strApkNo) {
        return PageSearchCustomerList(strUID, intPageSize, intPageIndex, strMsg,
                strAuthorizationCode, strApkNo, null);
    }

    public String PageSearchCustomerList(String strUID, String intPageSize, String intPageIndex,
                                         String strMsg, String strAuthorizationCode, String strApkNo,
                                         List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "PageSearchCustomerList");
        soapReq.addProperty("strUID", strUID);
        soapReq.addProperty("intPageSize", intPageSize);
        soapReq.addProperty("intPageIndex", intPageIndex);
        soapReq.addProperty("strMsg", strMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/PageSearchCustomerList", soapEnvelope,
                        headers);
            } else {
                httpTransport.call("http://tempuri.org/PageSearchCustomerList", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void UsersAddAsync(String varBranch, String varUserID, String varUserName,
                              String varNicName, String varRealName, String chrCodeType, String varUserCode,
                              String dtmAddTime, String intProvince, String intCity, String intCounty,
                              String varZipCode, String varUserAddress, String varMobile, String varTelephone,
                              String varFax, String varEmail, String varTeamNO, String varShopUserID,
                              String varFatherName, String intTreePlace, String varReName, String varWarehouseID,
                              String mnyTotalMoney, String mnyTotalPV, String varProductNOs,
                              String intIntegralQTYs, String intPaymentQTYs, String varBankName, String varBankType,
                              String intBankProvince, String intBankCity, String intBankCounty,
                              String varBankAddrees, String varBankNO, String varOperatPWD, String varShopID,
                              String varEBCode, String chrWalletType, String signMsg, String strAuthorizationCode,
                              String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        UsersAddAsync(varBranch, varUserID, varUserName, varNicName, varRealName, chrCodeType,
                varUserCode, dtmAddTime, intProvince, intCity, intCounty, varZipCode,
                varUserAddress, varMobile, varTelephone, varFax, varEmail, varTeamNO,
                varShopUserID, varFatherName, intTreePlace, varReName, varWarehouseID,
                mnyTotalMoney, mnyTotalPV, varProductNOs, intIntegralQTYs, intPaymentQTYs,varBankName,
                varBankType, intBankProvince, intBankCity, intBankCounty, varBankAddrees,
                varBankNO, varOperatPWD, varShopID, varEBCode, chrWalletType, signMsg,
                strAuthorizationCode, strApkNo, null);
    }

    public void UsersAddAsync(final String varBranch, final String varUserID,
                              final String varUserName, final String varNicName, final String varRealName,
                              final String chrCodeType, final String varUserCode, final String dtmAddTime,
                              final String intProvince, final String intCity, final String intCounty,
                              final String varZipCode, final String varUserAddress, final String varMobile,
                              final String varTelephone, final String varFax, final String varEmail,
                              final String varTeamNO, final String varShopUserID, final String varFatherName,
                              final String intTreePlace, final String varReName, final String varWarehouseID,
                              final String mnyTotalMoney, final String mnyTotalPV, final String varProductNOs,
                              final String intIntegralQTYs, final String intPaymentQTYs,
                              final String varBankName, final String varBankType, final String intBankProvince,
                              final String intBankCity, final String intBankCounty, final String varBankAddrees,
                              final String varBankNO, final String varOperatPWD, final String varShopID,
                              final String varEBCode, final String chrWalletType, final String signMsg,
                              final String strAuthorizationCode, final String strApkNo,
                              final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return UsersAdd(varBranch, varUserID, varUserName, varNicName, varRealName,
                        chrCodeType, varUserCode, dtmAddTime, intProvince, intCity, intCounty,
                        varZipCode, varUserAddress, varMobile, varTelephone, varFax, varEmail,
                        varTeamNO, varShopUserID, varFatherName, intTreePlace, varReName,
                        varWarehouseID, mnyTotalMoney, mnyTotalPV, varProductNOs, intPaymentQTYs,
                        intIntegralQTYs, varBankName, varBankType, intBankProvince, intBankCity,
                        intBankCounty, varBankAddrees, varBankNO, varOperatPWD, varShopID,
                        varEBCode, chrWalletType, signMsg, strAuthorizationCode, strApkNo, headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("UsersAdd", result);
                }
            }
        }.execute();
    }

    public String UsersAdd(String varBranch, String varUserID, String varUserName,
                           String varNicName, String varRealName, String chrCodeType, String varUserCode,
                           String dtmAddTime, String intProvince, String intCity, String intCounty,
                           String varZipCode, String varUserAddress, String varMobile, String varTelephone,
                           String varFax, String varEmail, String varTeamNO, String varShopUserID,
                           String varFatherName, String intTreePlace, String varReName, String varWarehouseID,
                           String mnyTotalMoney, String mnyTotalPV, String varProductNOs, String intPaymentQTYs,
                           String intIntegralQTYs,String varBankName, String varBankType,
                           String intBankProvince, String intBankCity, String intBankCounty,
                           String varBankAddrees, String varBankNO, String varOperatPWD, String varShopID,
                           String varEBCode, String chrWalletType, String signMsg, String strAuthorizationCode,
                           String strApkNo) {
        return UsersAdd(varBranch, varUserID, varUserName, varNicName, varRealName, chrCodeType,
                varUserCode, dtmAddTime, intProvince, intCity, intCounty, varZipCode,
                varUserAddress, varMobile, varTelephone, varFax, varEmail, varTeamNO,
                varShopUserID, varFatherName, intTreePlace, varReName, varWarehouseID,
                mnyTotalMoney, mnyTotalPV, varProductNOs, intPaymentQTYs, intIntegralQTYs, varBankName,
                varBankType, intBankProvince, intBankCity, intBankCounty, varBankAddrees,
                varBankNO, varOperatPWD, varShopID, varEBCode, chrWalletType, signMsg,
                strAuthorizationCode, strApkNo, null);
    }

    public String UsersAdd(String varBranch, String varUserID, String varUserName,
                           String varNicName, String varRealName, String chrCodeType, String varUserCode,
                           String dtmAddTime, String intProvince, String intCity, String intCounty,
                           String varZipCode, String varUserAddress, String varMobile, String varTelephone,
                           String varFax, String varEmail, String varTeamNO, String varShopUserID,
                           String varFatherName, String intTreePlace, String varReName, String varWarehouseID,
                           String mnyTotalMoney, String mnyTotalPV, String varProductNOs, String intPaymentQTYs,
                           String intIntegralQTYs, String varBankName, String varBankType,
                           String intBankProvince, String intBankCity, String intBankCounty,
                           String varBankAddrees, String varBankNO, String varOperatPWD, String varShopID,
                           String varEBCode, String chrWalletType, String signMsg, String strAuthorizationCode,
                           String strApkNo, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "UsersAdd");
        soapReq.addProperty("varBranch", varBranch);
        soapReq.addProperty("varUserID", varUserID);
        soapReq.addProperty("varUserName", varUserName);
        soapReq.addProperty("varNicName", varNicName);
        soapReq.addProperty("varRealName", varRealName);
        soapReq.addProperty("chrCodeType", chrCodeType);
        soapReq.addProperty("varUserCode", varUserCode);
        soapReq.addProperty("dtmAddTime", dtmAddTime);
        soapReq.addProperty("intProvince", intProvince);
        soapReq.addProperty("intCity", intCity);
        soapReq.addProperty("intCounty", intCounty);
        soapReq.addProperty("varZipCode", varZipCode);
        soapReq.addProperty("varUserAddress", varUserAddress);
        soapReq.addProperty("varMobile", varMobile);
        soapReq.addProperty("varTelephone", varTelephone);
        soapReq.addProperty("varFax", varFax);
        soapReq.addProperty("varEmail", varEmail);
        soapReq.addProperty("varTeamNO", varTeamNO);
        soapReq.addProperty("varShopUserID", varShopUserID);
        soapReq.addProperty("varFatherName", varFatherName);
        soapReq.addProperty("intTreePlace", intTreePlace);
        soapReq.addProperty("varReName", varReName);
        soapReq.addProperty("varWarehouseID", varWarehouseID);
        soapReq.addProperty("mnyTotalMoney", mnyTotalMoney);
        soapReq.addProperty("mnyTotalPV", mnyTotalPV);
        soapReq.addProperty("varProductNOs", varProductNOs);
        soapReq.addProperty("intPaymentQTYs", intPaymentQTYs);
        soapReq.addProperty("intIntegralQTYs", intIntegralQTYs);
        soapReq.addProperty("varBankName", varBankName);
        soapReq.addProperty("varBankType", varBankType);
        soapReq.addProperty("intBankProvince", intBankProvince);
        soapReq.addProperty("intBankCity", intBankCity);
        soapReq.addProperty("intBankCounty", intBankCounty);
        soapReq.addProperty("varBankAddrees", varBankAddrees);
        soapReq.addProperty("varBankNO", varBankNO);
        soapReq.addProperty("varOperatPWD", varOperatPWD);
        soapReq.addProperty("varShopID", varShopID);
        soapReq.addProperty("varEBCode", varEBCode);
        soapReq.addProperty("signMsg", signMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/UsersAdd", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/UsersAdd", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public String UsersAddByTicket(String varBranch, String varUserID, String varUserName,
                                   String varNicName, String varRealName, String chrCodeType, String varUserCode,
                                   String dtmAddTime, String intProvince, String intCity, String intCounty,
                                   String varZipCode, String varUserAddress, String varMobile, String varTelephone,
                                   String varFax, String varEmail, String varTeamNO, String varShopUserID,
                                   String varFatherName, String intTreePlace, String varReName, String varWarehouseID,
                                   String intSale, String varBankName, String varBankType, String intBankProvince,
                                   String intBankCity, String intBankCounty, String varBankAddrees, String varBankNO,
                                   String varOperatPWD, String varShopID, String varEBCode, String signMsg,
                                   String strAuthorizationCode, String strApkNo, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "UsersAddByTicket");
        soapReq.addProperty("varBranch", varBranch);
        soapReq.addProperty("varUserID", varUserID);
        soapReq.addProperty("varUserName", varUserName);
        soapReq.addProperty("varNicName", varNicName);
        soapReq.addProperty("varRealName", varRealName);
        soapReq.addProperty("chrCodeType", chrCodeType);
        soapReq.addProperty("varUserCode", varUserCode);
        soapReq.addProperty("dtmAddTime", dtmAddTime);
        soapReq.addProperty("intProvince", intProvince);
        soapReq.addProperty("intCity", intCity);
        soapReq.addProperty("intCounty", intCounty);
        soapReq.addProperty("varZipCode", varZipCode);
        soapReq.addProperty("varUserAddress", varUserAddress);
        soapReq.addProperty("varMobile", varMobile);
        soapReq.addProperty("varTelephone", varTelephone);
        soapReq.addProperty("varFax", varFax);
        soapReq.addProperty("varEmail", varEmail);
        soapReq.addProperty("varTeamNO", varTeamNO);
        soapReq.addProperty("varShopUserID", varShopUserID);
        soapReq.addProperty("varFatherName", varFatherName);
        soapReq.addProperty("intTreePlace", intTreePlace);
        soapReq.addProperty("varReName", varReName);
        soapReq.addProperty("varWarehouseID", varWarehouseID);
        soapReq.addProperty("intSale", intSale);
        soapReq.addProperty("varBankName", varBankName);
        soapReq.addProperty("varBankType", varBankType);
        soapReq.addProperty("intBankProvince", intBankProvince);
        soapReq.addProperty("intBankCity", intBankCity);
        soapReq.addProperty("intBankCounty", intBankCounty);
        soapReq.addProperty("varBankAddrees", varBankAddrees);
        soapReq.addProperty("varBankNO", varBankNO);
        soapReq.addProperty("varOperatPWD", varOperatPWD);
        soapReq.addProperty("varShopID", varShopID);
        soapReq.addProperty("varEBCode", varEBCode);
        soapReq.addProperty("signMsg", signMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/UsersAddByTicket", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/UsersAddByTicket", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void UserSaleAsync(String varUserID, String varShopID, String varProductNOs,
                              String intPaymentQTYs,String intIntegralQTYs, String varOperatPWD,String signMsg,
                              String strAuthorizationCode, String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        UserSaleAsync(varUserID, varShopID, varProductNOs, intPaymentQTYs,intIntegralQTYs, varOperatPWD,
                signMsg, strAuthorizationCode, strApkNo, null);
    }

    public void UserSaleAsync(final String varUserID, final String varShopID,
                              final String varProductNOs, final String intPaymentQTYs,final String intIntegralQTYs,
                              final String varOperatPWD,final String signMsg, final String strAuthorizationCode,
                              final String strApkNo, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return UserSale(varUserID, varShopID, varProductNOs, intPaymentQTYs,intIntegralQTYs, varOperatPWD,
                        signMsg, strAuthorizationCode, strApkNo, headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("UserSale", result);
                }
            }
        }.execute();
    }

    public String UserSale(String varUserID, String varShopID, String varProductNOs,
                           String intPaymentQTYs,String intIntegralQTYs, String varOperatPWD,String signMsg,
                           String strAuthorizationCode, String strApkNo) {
        return UserSale(varUserID, varShopID, varProductNOs, intPaymentQTYs, intIntegralQTYs,varOperatPWD,
                signMsg, strAuthorizationCode, strApkNo, null);
    }

    public String UserSale(String varUserID, String varShopID, String varProductNOs,String intPaymentQTYs,
                           String intIntegralQTYs, String varOperatPWD, String signMsg,
                           String strAuthorizationCode, String strApkNo, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "UserSale");
        soapReq.addProperty("varUserID", varUserID);
        soapReq.addProperty("varShopID", varShopID);
        soapReq.addProperty("varProductNOs", varProductNOs);
        soapReq.addProperty("intPaymentQTYs", intPaymentQTYs);
        soapReq.addProperty("intIntegralQTYs", intIntegralQTYs);
        soapReq.addProperty("varOperatPWD", varOperatPWD);
        soapReq.addProperty("signMsg", signMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/UserSale", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/UserSale", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public String UserSaleByTicket(String varUserID, String varShopID, String intSale,
                                   String varOperatPWD, String signMsg, String strAuthorizationCode, String strApkNo,
                                   List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "UserSaleByTicket");
        soapReq.addProperty("varUserID", varUserID);
        soapReq.addProperty("varShopID", varShopID);
        soapReq.addProperty("intSale", intSale);
        soapReq.addProperty("varOperatPWD", varOperatPWD);
        soapReq.addProperty("signMsg", signMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/UserSaleByTicket", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/UserSaleByTicket", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void TransferApplyAsync(String varBranch, String tranInVarUserID, String tranOutVarUID,
                                   String tranOutVarUserID, String mnyMoney, String varDescription, String varOperatPWD,
                                   String signMsg, String wallettype, String strAuthorizationCode, String strApkNo)
            throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        TransferApplyAsync(varBranch, tranInVarUserID, tranOutVarUID, tranOutVarUserID, mnyMoney,
                varDescription, varOperatPWD, signMsg, wallettype, strAuthorizationCode, strApkNo,
                null);
    }

    public void TransferApplyAsync(final String varBranch, final String tranInVarUserID,
                                   final String tranOutVarUID, final String tranOutVarUserID, final String mnyMoney,
                                   final String varDescription, final String varOperatPWD, final String signMsg,
                                   final String wallettype, final String strAuthorizationCode, final String strApkNo,
                                   final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return TransferApply(varBranch, tranInVarUserID, tranOutVarUID, tranOutVarUserID,
                        mnyMoney, varDescription, varOperatPWD, signMsg, wallettype,
                        strAuthorizationCode, strApkNo, headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("TransferApply", result);
                }
            }
        }.execute();
    }

    public String TransferApply(String varBranch, String tranInVarUserID, String tranOutVarUID,
                                String tranOutVarUserID, String mnyMoney, String varDescription, String varOperatPWD,
                                String signMsg, String wallettype, String strAuthorizationCode, String strApkNo) {
        return TransferApply(varBranch, tranInVarUserID, tranOutVarUID, tranOutVarUserID, mnyMoney,
                varDescription, varOperatPWD, signMsg, wallettype, strAuthorizationCode, strApkNo,
                null);
    }

    public String TransferApply(String varBranch, String tranInVarUserID, String tranOutVarUID,
                                String tranOutVarUserID, String mnyMoney, String varDescription, String varOperatPWD,
                                String signMsg, String wallettype, String strAuthorizationCode, String strApkNo,
                                List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "TransferApply");
        soapReq.addProperty("varBranch", varBranch);
        soapReq.addProperty("tranInVarUserID", tranInVarUserID);
        soapReq.addProperty("tranOutVarUID", tranOutVarUID);
        soapReq.addProperty("tranOutVarUserID", tranOutVarUserID);
        soapReq.addProperty("mnyMoney", mnyMoney);
        soapReq.addProperty("varDescription", varDescription);
        soapReq.addProperty("varOperatPWD", varOperatPWD);
        soapReq.addProperty("signMsg", signMsg);
        soapReq.addProperty("wallettype", wallettype);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/TransferApply", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/TransferApply", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void TransferEShopAsync(String strWalletType, String strUID, String intMoney,
                                   String varOperatPWD, String signMsg, String strAuthorizationCode, String strApkNo)
            throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        TransferEShopAsync(strWalletType, strUID, intMoney, varOperatPWD, signMsg,
                strAuthorizationCode, strApkNo, null);
    }

    public void TransferEShopAsync(final String strWalletType, final String strUID,
                                   final String intMoney, final String varOperatPWD, final String signMsg,
                                   final String strAuthorizationCode, final String strApkNo,
                                   final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return TransferEShop(strWalletType, strUID, intMoney, varOperatPWD, signMsg,
                        strAuthorizationCode, strApkNo, headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("TransferEShop", result);
                }
            }
        }.execute();
    }

    public String TransferEShop(String strWalletType, String strUID, String intMoney,
                                String varOperatPWD, String signMsg, String strAuthorizationCode, String strApkNo) {
        return TransferEShop(strWalletType, strUID, intMoney, varOperatPWD, signMsg,
                strAuthorizationCode, strApkNo, null);
    }

    public String TransferEShop(String strWalletType, String strUID, String intMoney,
                                String varOperatPWD, String signMsg, String strAuthorizationCode, String strApkNo,
                                List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "TransferEShop");
        soapReq.addProperty("strWalletType", strWalletType);
        soapReq.addProperty("strUID", strUID);
        soapReq.addProperty("intMoney", intMoney);
        soapReq.addProperty("varOperatPWD", varOperatPWD);
        soapReq.addProperty("signMsg", signMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/TransferEShop", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/TransferEShop", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public String TransferEShopByTicket(String strUID, String intMoney, String varOperatPWD,
                                        String signMsg, String strAuthorizationCode, String strApkNo) {
        return TransferEShopByTicket(strUID, intMoney, varOperatPWD, signMsg, strAuthorizationCode,
                strApkNo, null);
    }

    public String TransferEShopByTicket(String strUID, String intMoney, String varOperatPWD,
                                        String signMsg, String strAuthorizationCode, String strApkNo,
                                        List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "TransferEShopByTicket");
        soapReq.addProperty("strUID", strUID);
        soapReq.addProperty("intMoney", intMoney);
        soapReq.addProperty("varOperatPWD", varOperatPWD);
        soapReq.addProperty("signMsg", signMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/TransferEShopByTicket", soapEnvelope,
                        headers);
            } else {
                httpTransport.call("http://tempuri.org/TransferEShopByTicket", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void GetUserIDAsync(String intRandom, String signMsg, String strAuthorizationCode,
                               String varUID, String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetUserIDAsync(intRandom, signMsg, strAuthorizationCode, varUID, strApkNo, null);
    }

    public void GetUserIDAsync(final String intRandom, final String signMsg,
                               final String strAuthorizationCode, final String varUID, final String strApkNo,
                               final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return GetUserID(intRandom, signMsg, strAuthorizationCode, varUID, strApkNo,
                        headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("GetUserID", result);
                }
            }
        }.execute();
    }

    public String GetUserID(String intRandom, String signMsg, String strAuthorizationCode,
                            String varUID, String strApkNo) {
        return GetUserID(intRandom, signMsg, strAuthorizationCode, varUID, strApkNo, null);
    }

    public String GetUserID(String intRandom, String signMsg, String strAuthorizationCode,
                            String varUID, String strApkNo, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "GetUserID");
        soapReq.addProperty("intRandom", intRandom);
        soapReq.addProperty("signMsg", signMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("varUID", varUID);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/GetUserID", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/GetUserID", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void GetFatherBottomAsync(String varReName, String varShopID, String signMsg,
                                     String strAuthorizationCode, String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetFatherBottomAsync(varReName, varShopID, signMsg, strAuthorizationCode, strApkNo, null);
    }

    public void GetFatherBottomAsync(final String varReName, final String varShopID,
                                     final String signMsg, final String strAuthorizationCode, final String strApkNo,
                                     final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return GetFatherBottom(varReName, varShopID, signMsg, strAuthorizationCode,
                        strApkNo, headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("GetFatherBottom", result);
                }
            }
        }.execute();
    }

    public String GetFatherBottom(String varReName, String varShopID, String signMsg,
                                  String strAuthorizationCode, String strApkNo) {
        return GetFatherBottom(varReName, varShopID, signMsg, strAuthorizationCode, strApkNo, null);
    }

    public String GetFatherBottom(String varReName, String varShopID, String signMsg,
                                  String strAuthorizationCode, String strApkNo, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "GetFatherBottom");
        soapReq.addProperty("varReName", varReName);
        soapReq.addProperty("varShopID", varShopID);
        soapReq.addProperty("signMsg", signMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/GetFatherBottom", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/GetFatherBottom", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void IsPathAsync(String varFirUserID, String varSecUserID, String signMsg,
                            String strAuthorizationCode, String varUID, String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        IsPathAsync(varFirUserID, varSecUserID, signMsg, strAuthorizationCode, varUID, strApkNo,
                null);
    }

    public void IsPathAsync(final String varFirUserID, final String varSecUserID,
                            final String signMsg, final String strAuthorizationCode, final String varUID,
                            final String strApkNo, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return IsPath(varFirUserID, varSecUserID, signMsg, strAuthorizationCode, varUID,
                        strApkNo, headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("IsPath", result);
                }
            }
        }.execute();
    }

    public String IsPath(String varFirUserID, String varSecUserID, String signMsg,
                         String strAuthorizationCode, String varUID, String strApkNo) {
        return IsPath(varFirUserID, varSecUserID, signMsg, strAuthorizationCode, varUID, strApkNo,
                null);
    }

    public String IsPath(String varFirUserID, String varSecUserID, String signMsg,
                         String strAuthorizationCode, String varUID, String strApkNo,
                         List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "IsPath");
        soapReq.addProperty("varFirUserID", varFirUserID);
        soapReq.addProperty("varSecUserID", varSecUserID);
        soapReq.addProperty("signMsg", signMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("varUID", varUID);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/IsPath", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/IsPath", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void IsUserNameAsync(String userName, String signMsg, String strAuthorizationCode,
                                String varUID, String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        IsUserNameAsync(userName, signMsg, strAuthorizationCode, varUID, strApkNo, null);
    }

    public void IsUserNameAsync(final String userName, final String signMsg,
                                final String strAuthorizationCode, final String varUID, final String strApkNo,
                                final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return IsUserName(userName, signMsg, strAuthorizationCode, varUID, strApkNo,
                        headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("IsUserName", result);
                }
            }
        }.execute();
    }

    public String IsUserName(String userName, String signMsg, String strAuthorizationCode,
                             String varUID, String strApkNo) {
        return IsUserName(userName, signMsg, strAuthorizationCode, varUID, strApkNo, null);
    }

    public String IsUserName(String userName, String signMsg, String strAuthorizationCode,
                             String varUID, String strApkNo, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "IsUserName");
        soapReq.addProperty("userName", userName);
        soapReq.addProperty("signMsg", signMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("varUID", varUID);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/IsUserName", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/IsUserName", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void GetShopNameByUserIDAsync(String userID, String signMsg,
                                         String strAuthorizationCode, String varUID, String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetShopNameByUserIDAsync(userID, signMsg, strAuthorizationCode, varUID, strApkNo, null);
    }

    public void GetShopNameByUserIDAsync(final String userID, final String signMsg,
                                         final String strAuthorizationCode, final String varUID, final String strApkNo,
                                         final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return GetShopNameByUserID(userID, signMsg, strAuthorizationCode, varUID, strApkNo,
                        headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("GetShopNameByUserID", result);
                }
            }
        }.execute();
    }

    public String GetShopNameByUserID(String userID, String signMsg, String strAuthorizationCode,
                                      String varUID, String strApkNo) {
        return GetShopNameByUserID(userID, signMsg, strAuthorizationCode, varUID, strApkNo, null);
    }

    public String GetShopNameByUserID(String userID, String signMsg, String strAuthorizationCode,
                                      String varUID, String strApkNo, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "GetShopNameByUserID");
        soapReq.addProperty("userID", userID);
        soapReq.addProperty("signMsg", signMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("varUID", varUID);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/GetShopNameByUserID", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/GetShopNameByUserID", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void SearchQuestionByUserIDAsync(String strUserID, String strSignMsg, String strApkNo)
            throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        SearchQuestionByUserIDAsync(strUserID, strSignMsg, strApkNo, null);
    }

    public void SearchQuestionByUserIDAsync(final String strUserID, final String strSignMsg,
                                            final String strApkNo, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return SearchQuestionByUserID(strUserID, strSignMsg, strApkNo, headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("SearchQuestionByUserID", result);
                }
            }
        }.execute();
    }

    public String SearchQuestionByUserID(String strUserID, String strSignMsg, String strApkNo) {
        return SearchQuestionByUserID(strUserID, strSignMsg, strApkNo, null);
    }

    public String SearchQuestionByUserID(String strUserID, String strSignMsg, String strApkNo,
                                         List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "SearchQuestionByUserID");
        soapReq.addProperty("strUserID", strUserID);
        soapReq.addProperty("strSignMsg", strSignMsg);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/SearchQuestionByUserID", soapEnvelope,
                        headers);
            } else {
                httpTransport.call("http://tempuri.org/SearchQuestionByUserID", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void UserUnLockByQuestionAsync(String strUserID, String strQuestion, String strAnswer,
                                          String strMsg, String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        UserUnLockByQuestionAsync(strUserID, strQuestion, strAnswer, strMsg, strApkNo, null);
    }

    public void UserUnLockByQuestionAsync(final String strUserID, final String strQuestion,
                                          final String strAnswer, final String strMsg, final String strApkNo,
                                          final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return UserUnLockByQuestion(strUserID, strQuestion, strAnswer, strMsg, strApkNo,
                        headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("UserUnLockByQuestion", result);
                }
            }
        }.execute();
    }

    public String UserUnLockByQuestion(String strUserID, String strQuestion, String strAnswer,
                                       String strMsg, String strApkNo) {
        return UserUnLockByQuestion(strUserID, strQuestion, strAnswer, strMsg, strApkNo, null);
    }

    public String UserUnLockByQuestion(String strUserID, String strQuestion, String strAnswer,
                                       String strMsg, String strApkNo, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "UserUnLockByQuestion");
        soapReq.addProperty("strUserID", strUserID);
        soapReq.addProperty("strQuestion", strQuestion);
        soapReq.addProperty("strAnswer", strAnswer);
        soapReq.addProperty("strMsg", strMsg);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport
                        .call("http://tempuri.org/UserUnLockByQuestion", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/UserUnLockByQuestion", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void SendUnLockRandomCodeAsync(String strUserID, String strMsg, String strApkNo)
            throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        SendUnLockRandomCodeAsync(strUserID, strMsg, strApkNo, null);
    }

    public void SendUnLockRandomCodeAsync(final String strUserID, final String strMsg,
                                          final String strApkNo, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return SendUnLockRandomCode(strUserID, strMsg, strApkNo, headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("SendUnLockRandomCode", result);
                }
            }
        }.execute();
    }

    public String SendUnLockRandomCode(String strUserID, String strMsg, String strApkNo) {
        return SendUnLockRandomCode(strUserID, strMsg, strApkNo, null);
    }

    public String SendUnLockRandomCode(String strUserID, String strMsg, String strApkNo,
                                       List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "SendUnLockRandomCode");
        soapReq.addProperty("strUserID", strUserID);
        soapReq.addProperty("strMsg", strMsg);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport
                        .call("http://tempuri.org/SendUnLockRandomCode", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/SendUnLockRandomCode", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void UserUnLockByRandomCodeAsync(String strUserID, String strMsg, String strApkNo)
            throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        UserUnLockByRandomCodeAsync(strUserID, strMsg, strApkNo, null);
    }

    public void UserUnLockByRandomCodeAsync(final String strUserID, final String strMsg,
                                            final String strApkNo, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return UserUnLockByRandomCode(strUserID, strMsg, strApkNo, headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("UserUnLockByRandomCode", result);
                }
            }
        }.execute();
    }

    public String UserUnLockByRandomCode(String strUserID, String strMsg, String strApkNo) {
        return UserUnLockByRandomCode(strUserID, strMsg, strApkNo, null);
    }

    public String UserUnLockByRandomCode(String strUserID, String strMsg, String strApkNo,
                                         List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "UserUnLockByRandomCode");
        soapReq.addProperty("strUserID", strUserID);
        soapReq.addProperty("strMsg", strMsg);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/UserUnLockByRandomCode", soapEnvelope,
                        headers);
            } else {
                httpTransport.call("http://tempuri.org/UserUnLockByRandomCode", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void SendRandomCodeAsync(String strUserID, String strMsg, String strApkNo)
            throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        SendRandomCodeAsync(strUserID, strMsg, strApkNo, null);
    }

    public void SendRandomCodeAsync(final String strUserID, final String strMsg,
                                    final String strApkNo, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return SendRandomCode(strUserID, strMsg, strApkNo, headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("SendRandomCode", result);
                }
            }
        }.execute();
    }

    public String SendRandomCode(String strUserID, String strMsg, String strApkNo) {
        return SendRandomCode(strUserID, strMsg, strApkNo, null);
    }

    public String SendRandomCode(String strUserID, String strMsg, String strApkNo,
                                 List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "SendRandomCode");
        soapReq.addProperty("strUserID", strUserID);
        soapReq.addProperty("strMsg", strMsg);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/SendRandomCode", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/SendRandomCode", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void ValidPhoneRandomCodeAsync(String strUserID, String strRandomCode, String strMsg,
                                          String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        ValidPhoneRandomCodeAsync(strUserID, strRandomCode, strMsg, strApkNo, null);
    }

    public void ValidPhoneRandomCodeAsync(final String strUserID, final String strRandomCode,
                                          final String strMsg, final String strApkNo, final List<HeaderProperty> headers)
            throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return ValidPhoneRandomCode(strUserID, strRandomCode, strMsg, strApkNo, headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("ValidPhoneRandomCode", result);
                }
            }
        }.execute();
    }

    public String ValidPhoneRandomCode(String strUserID, String strRandomCode, String strMsg,
                                       String strApkNo) {
        return ValidPhoneRandomCode(strUserID, strRandomCode, strMsg, strApkNo, null);
    }

    public String ValidPhoneRandomCode(String strUserID, String strRandomCode, String strMsg,
                                       String strApkNo, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "ValidPhoneRandomCode");
        soapReq.addProperty("strUserID", strUserID);
        soapReq.addProperty("strRandomCode", strRandomCode);
        soapReq.addProperty("strMsg", strMsg);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport
                        .call("http://tempuri.org/ValidPhoneRandomCode", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/ValidPhoneRandomCode", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void LoadUserQuestionAsync(String strUserID, String strMd5Random, String strMsg,
                                      String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        LoadUserQuestionAsync(strUserID, strMd5Random, strMsg, strApkNo, null);
    }

    public void LoadUserQuestionAsync(final String strUserID, final String strMd5Random,
                                      final String strMsg, final String strApkNo, final List<HeaderProperty> headers)
            throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return LoadUserQuestion(strUserID, strMd5Random, strMsg, strApkNo, headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("LoadUserQuestion", result);
                }
            }
        }.execute();
    }

    public String LoadUserQuestion(String strUserID, String strMd5Random, String strMsg,
                                   String strApkNo) {
        return LoadUserQuestion(strUserID, strMd5Random, strMsg, strApkNo, null);
    }

    public String LoadUserQuestion(String strUserID, String strMd5Random, String strMsg,
                                   String strApkNo, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "LoadUserQuestion");
        soapReq.addProperty("strUserID", strUserID);
        soapReq.addProperty("strMd5Random", strMd5Random);
        soapReq.addProperty("strMsg", strMsg);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/LoadUserQuestion", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/LoadUserQuestion", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void UserValidQuestionAsync(String strUserID, String strQuestion, String strAnswer,
                                       String strMsg, String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        UserValidQuestionAsync(strUserID, strQuestion, strAnswer, strMsg, strApkNo, null);
    }

    public void UserValidQuestionAsync(final String strUserID, final String strQuestion,
                                       final String strAnswer, final String strMsg, final String strApkNo,
                                       final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return UserValidQuestion(strUserID, strQuestion, strAnswer, strMsg, strApkNo,
                        headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("UserValidQuestion", result);
                }
            }
        }.execute();
    }

    public String UserValidQuestion(String strUserID, String strQuestion, String strAnswer,
                                    String strMsg, String strApkNo) {
        return UserValidQuestion(strUserID, strQuestion, strAnswer, strMsg, strApkNo, null);
    }

    public String UserValidQuestion(String strUserID, String strQuestion, String strAnswer,
                                    String strMsg, String strApkNo, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "UserValidQuestion");
        soapReq.addProperty("strUserID", strUserID);
        soapReq.addProperty("strQuestion", strQuestion);
        soapReq.addProperty("strAnswer", strAnswer);
        soapReq.addProperty("strMsg", strMsg);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/UserValidQuestion", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/UserValidQuestion", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void ValidMD5RandomCodeAsync(String strUserID, String strMd5Random, String strMsg,
                                        String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        ValidMD5RandomCodeAsync(strUserID, strMd5Random, strMsg, strApkNo, null);
    }

    public void ValidMD5RandomCodeAsync(final String strUserID, final String strMd5Random,
                                        final String strMsg, final String strApkNo, final List<HeaderProperty> headers)
            throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return ValidMD5RandomCode(strUserID, strMd5Random, strMsg, strApkNo, headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("ValidMD5RandomCode", result);
                }
            }
        }.execute();
    }

    public String ValidMD5RandomCode(String strUserID, String strMd5Random, String strMsg,
                                     String strApkNo) {
        return ValidMD5RandomCode(strUserID, strMd5Random, strMsg, strApkNo, null);
    }

    public String ValidMD5RandomCode(String strUserID, String strMd5Random, String strMsg,
                                     String strApkNo, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "ValidMD5RandomCode");
        soapReq.addProperty("strUserID", strUserID);
        soapReq.addProperty("strMd5Random", strMd5Random);
        soapReq.addProperty("strMsg", strMsg);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/ValidMD5RandomCode", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/ValidMD5RandomCode", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void UserValidCardIDAndBankAsync(String strUserID, String strMd5Random,
                                            String strCardID, String strBankNO, String strMsg, String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        UserValidCardIDAndBankAsync(strUserID, strMd5Random, strCardID, strBankNO, strMsg,
                strApkNo, null);
    }

    public void UserValidCardIDAndBankAsync(final String strUserID, final String strMd5Random,
                                            final String strCardID, final String strBankNO, final String strMsg,
                                            final String strApkNo, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return UserValidCardIDAndBank(strUserID, strMd5Random, strCardID, strBankNO,
                        strMsg, strApkNo, headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("UserValidCardIDAndBank", result);
                }
            }
        }.execute();
    }

    public String UserValidCardIDAndBank(String strUserID, String strMd5Random, String strCardID,
                                         String strBankNO, String strMsg, String strApkNo) {
        return UserValidCardIDAndBank(strUserID, strMd5Random, strCardID, strBankNO, strMsg,
                strApkNo, null);
    }

    public String UserValidCardIDAndBank(String strUserID, String strMd5Random, String strCardID,
                                         String strBankNO, String strMsg, String strApkNo, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "UserValidCardIDAndBank");
        soapReq.addProperty("strUserID", strUserID);
        soapReq.addProperty("strMd5Random", strMd5Random);
        soapReq.addProperty("strCardID", strCardID);
        soapReq.addProperty("strBankNO", strBankNO);
        soapReq.addProperty("strMsg", strMsg);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/UserValidCardIDAndBank", soapEnvelope,
                        headers);
            } else {
                httpTransport.call("http://tempuri.org/UserValidCardIDAndBank", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void SendNewPwdAsync(String strUserID, String strMsg, String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        SendNewPwdAsync(strUserID, strMsg, strApkNo, null);
    }

    public void SendNewPwdAsync(final String strUserID, final String strMsg, final String strApkNo,
                                final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return SendNewPwd(strUserID, strMsg, strApkNo, headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("SendNewPwd", result);
                }
            }
        }.execute();
    }

    public String SendNewPwd(String strUserID, String strMsg, String strApkNo) {
        return SendNewPwd(strUserID, strMsg, strApkNo, null);
    }

    public String SendNewPwd(String strUserID, String strMsg, String strApkNo,
                             List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "SendNewPwd");
        soapReq.addProperty("strUserID", strUserID);
        soapReq.addProperty("strMsg", strMsg);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/SendNewPwd", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/SendNewPwd", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void UpdateLoginPWDAsync(String varUID, String varOldPWD, String varNewPWD,
                                    String strMsg, String strAuthorizationCode, String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        UpdateLoginPWDAsync(varUID, varOldPWD, varNewPWD, strMsg, strAuthorizationCode, strApkNo,
                null);
    }

    public void UpdateLoginPWDAsync(final String varUID, final String varOldPWD,
                                    final String varNewPWD, final String strMsg, final String strAuthorizationCode,
                                    final String strApkNo, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return UpdateLoginPWD(varUID, varOldPWD, varNewPWD, strMsg, strAuthorizationCode,
                        strApkNo, headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("UpdateLoginPWD", result);
                }
            }
        }.execute();
    }

    public String UpdateLoginPWD(String varUID, String varOldPWD, String varNewPWD, String strMsg,
                                 String strAuthorizationCode, String strApkNo) {
        return UpdateLoginPWD(varUID, varOldPWD, varNewPWD, strMsg, strAuthorizationCode, strApkNo,
                null);
    }

    public String UpdateLoginPWD(String varUID, String varOldPWD, String varNewPWD, String strMsg,
                                 String strAuthorizationCode, String strApkNo, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "UpdateLoginPWD");
        soapReq.addProperty("varUID", varUID);
        soapReq.addProperty("varOldPWD", varOldPWD);
        soapReq.addProperty("varNewPWD", varNewPWD);
        soapReq.addProperty("strMsg", strMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/UpdateLoginPWD", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/UpdateLoginPWD", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void UpdateOpeartPWDAsync(String varUID, String varOldPWD, String varNewPWD,
                                     String strMsg, String strAuthorizationCode, String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        UpdateOpeartPWDAsync(varUID, varOldPWD, varNewPWD, strMsg, strAuthorizationCode, strApkNo,
                null);
    }

    public void UpdateOpeartPWDAsync(final String varUID, final String varOldPWD,
                                     final String varNewPWD, final String strMsg, final String strAuthorizationCode,
                                     final String strApkNo, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return UpdateOpeartPWD(varUID, varOldPWD, varNewPWD, strMsg, strAuthorizationCode,
                        strApkNo, headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("UpdateOpeartPWD", result);
                }
            }
        }.execute();
    }

    public String UpdateOpeartPWD(String varUID, String varOldPWD, String varNewPWD, String strMsg,
                                  String strAuthorizationCode, String strApkNo) {
        return UpdateOpeartPWD(varUID, varOldPWD, varNewPWD, strMsg, strAuthorizationCode,
                strApkNo, null);
    }

    public String UpdateOpeartPWD(String varUID, String varOldPWD, String varNewPWD, String strMsg,
                                  String strAuthorizationCode, String strApkNo, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "UpdateOpeartPWD");
        soapReq.addProperty("varUID", varUID);
        soapReq.addProperty("varOldPWD", varOldPWD);
        soapReq.addProperty("varNewPWD", varNewPWD);
        soapReq.addProperty("strMsg", strMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/UpdateOpeartPWD", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/UpdateOpeartPWD", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void SearchNewsToMobileAsync(String pageSize, String pageIndex, String strMsg,
                                        String strAuthorizationCode, String varUID, String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        SearchNewsToMobileAsync(pageSize, pageIndex, strMsg, strAuthorizationCode, varUID,
                strApkNo, null);
    }

    public void SearchNewsToMobileAsync(final String pageSize, final String pageIndex,
                                        final String strMsg, final String strAuthorizationCode, final String varUID,
                                        final String strApkNo, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return SearchNewsToMobile(pageSize, pageIndex, strMsg, strAuthorizationCode,
                        varUID, strApkNo, headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("SearchNewsToMobile", result);
                }
            }
        }.execute();
    }

    public String SearchNewsToMobile(String pageSize, String pageIndex, String strMsg,
                                     String strAuthorizationCode, String varUID, String strApkNo) {
        return SearchNewsToMobile(pageSize, pageIndex, strMsg, strAuthorizationCode, varUID,
                strApkNo, null);
    }

    public String SearchNewsToMobile(String pageSize, String pageIndex, String strMsg,
                                     String strAuthorizationCode, String varUID, String strApkNo,
                                     List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "SearchNewsToMobile");
        soapReq.addProperty("pageSize", pageSize);
        soapReq.addProperty("pageIndex", pageIndex);
        soapReq.addProperty("strMsg", strMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("varUID", varUID);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/SearchNewsToMobile", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/SearchNewsToMobile", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void GetNewsByIDAsync(String varUID, String strMsg, String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetNewsByIDAsync(varUID, strMsg, strApkNo, null);
    }

    public void GetNewsByIDAsync(final String varUID, final String strMsg, final String strApkNo,
                                 final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return GetNewsByID(varUID, strMsg, strApkNo, headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("GetNewsByID", result);
                }
            }
        }.execute();
    }

    public String GetNewsByID(String varUID, String strMsg, String strApkNo) {
        return GetNewsByID(varUID, strMsg, strApkNo, null);
    }

    public String GetNewsByID(String varUID, String strMsg, String strApkNo,
                              List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "GetNewsByID");
        soapReq.addProperty("varUID", varUID);
        soapReq.addProperty("strMsg", strMsg);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/GetNewsByID", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/GetNewsByID", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void SearchNewsInfoToMobileAsync(String varUID, String newsID, String strMsg,
                                            String strAuthorizationCode, String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        SearchNewsInfoToMobileAsync(varUID, newsID, strMsg, strAuthorizationCode, strApkNo, null);
    }

    public void SearchNewsInfoToMobileAsync(final String varUID, final String newsID,
                                            final String strMsg, final String strAuthorizationCode, final String strApkNo,
                                            final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return SearchNewsInfoToMobile(varUID, newsID, strMsg, strAuthorizationCode,
                        strApkNo, headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("SearchNewsInfoToMobile", result);
                }
            }
        }.execute();
    }

    public String SearchNewsInfoToMobile(String varUID, String newsID, String strMsg,
                                         String strAuthorizationCode, String strApkNo) {
        return SearchNewsInfoToMobile(varUID, newsID, strMsg, strAuthorizationCode, strApkNo, null);
    }

    public String SearchNewsInfoToMobile(String varUID, String newsID, String strMsg,
                                         String strAuthorizationCode, String strApkNo, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "SearchNewsInfoToMobile");
        soapReq.addProperty("varUID", varUID);
        soapReq.addProperty("newsID", newsID);
        soapReq.addProperty("strMsg", strMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/SearchNewsInfoToMobile", soapEnvelope,
                        headers);
            } else {
                httpTransport.call("http://tempuri.org/SearchNewsInfoToMobile", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void SearchProductToMobileAsync(String pageSize, String pageIndex, String strMsg,
                                           String strAuthorizationCode, String varUID, String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        SearchProductToMobileAsync(pageSize, pageIndex, strMsg, strAuthorizationCode, varUID,
                strApkNo, null);
    }

    public void SearchProductToMobileAsync(final String pageSize, final String pageIndex,
                                           final String strMsg, final String strAuthorizationCode, final String varUID,
                                           final String strApkNo, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return SearchProductToMobile(pageSize, pageIndex, strMsg, strAuthorizationCode,
                        varUID, strApkNo, headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("SearchProductToMobile", result);
                }
            }
        }.execute();
    }

    public String SearchProductToMobile(String pageSize, String pageIndex, String strMsg,
                                        String strAuthorizationCode, String varUID, String strApkNo) {
        return SearchProductToMobile(pageSize, pageIndex, strMsg, strAuthorizationCode, varUID,
                strApkNo, null);
    }

    public String SearchProductToMobile(String pageSize, String pageIndex, String strMsg,
                                        String strAuthorizationCode, String varUID, String strApkNo,
                                        List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "SearchProductToMobile");
        soapReq.addProperty("pageSize", pageSize);
        soapReq.addProperty("pageIndex", pageIndex);
        soapReq.addProperty("strMsg", strMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("varUID", varUID);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/SearchProductToMobile", soapEnvelope,
                        headers);
            } else {
                httpTransport.call("http://tempuri.org/SearchProductToMobile", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void SearchProInfoToMobileAsync(String proNO, String strMsg,
                                           String strAuthorizationCode, String varUID, String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        SearchProInfoToMobileAsync(proNO, strMsg, strAuthorizationCode, varUID, strApkNo, null);
    }

    public void SearchProInfoToMobileAsync(final String proNO, final String strMsg,
                                           final String strAuthorizationCode, final String varUID, final String strApkNo,
                                           final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return SearchProInfoToMobile(proNO, strMsg, strAuthorizationCode, varUID, strApkNo,
                        headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("SearchProInfoToMobile", result);
                }
            }
        }.execute();
    }

    public String SearchProInfoToMobile(String proNO, String strMsg, String strAuthorizationCode,
                                        String varUID, String strApkNo) {
        return SearchProInfoToMobile(proNO, strMsg, strAuthorizationCode, varUID, strApkNo, null);
    }

    public String SearchProInfoToMobile(String proNO, String strMsg, String strAuthorizationCode,
                                        String varUID, String strApkNo, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "SearchProInfoToMobile");
        soapReq.addProperty("proNO", proNO);
        soapReq.addProperty("strMsg", strMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("varUID", varUID);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/SearchProInfoToMobile", soapEnvelope,
                        headers);
            } else {
                httpTransport.call("http://tempuri.org/SearchProInfoToMobile", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void SearchFileToMobileAsync(String pageSize, String pageIndex, String strMsg,
                                        String strAuthorizationCode, String varUID, String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        SearchFileToMobileAsync(pageSize, pageIndex, strMsg, strAuthorizationCode, varUID,
                strApkNo, null);
    }

    public void SearchFileToMobileAsync(final String pageSize, final String pageIndex,
                                        final String strMsg, final String strAuthorizationCode, final String varUID,
                                        final String strApkNo, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return SearchFileToMobile(pageSize, pageIndex, strMsg, strAuthorizationCode,
                        varUID, strApkNo, headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("SearchFileToMobile", result);
                }
            }
        }.execute();
    }

    public String SearchFileToMobile(String pageSize, String pageIndex, String strMsg,
                                     String strAuthorizationCode, String varUID, String strApkNo) {
        return SearchFileToMobile(pageSize, pageIndex, strMsg, strAuthorizationCode, varUID,
                strApkNo, null);
    }

    public String SearchFileToMobile(String pageSize, String pageIndex, String strMsg,
                                     String strAuthorizationCode, String varUID, String strApkNo,
                                     List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "SearchFileToMobile");
        soapReq.addProperty("pageSize", pageSize);
        soapReq.addProperty("pageIndex", pageIndex);
        soapReq.addProperty("strMsg", strMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("varUID", varUID);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/SearchFileToMobile", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/SearchFileToMobile", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void SearchAreaAndStoreInfoAsync(String flag, String areaID, String strMsg,
                                            String strAuthorizationCode, String varUID, String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        SearchAreaAndStoreInfoAsync(flag, areaID, strMsg, strAuthorizationCode, varUID, strApkNo,
                null);
    }

    public void SearchAreaAndStoreInfoAsync(final String flag, final String areaID,
                                            final String strMsg, final String strAuthorizationCode, final String varUID,
                                            final String strApkNo, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return SearchAreaAndStoreInfo(flag, areaID, strMsg, strAuthorizationCode, varUID,
                        strApkNo, headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("SearchAreaAndStoreInfo", result);
                }
            }
        }.execute();
    }

    public String SearchAreaAndStoreInfo(String flag, String areaID, String strMsg,
                                         String strAuthorizationCode, String varUID, String strApkNo) {
        return SearchAreaAndStoreInfo(flag, areaID, strMsg, strAuthorizationCode, varUID, strApkNo,
                null);
    }

    public String SearchAreaAndStoreInfo(String flag, String areaID, String strMsg,
                                         String strAuthorizationCode, String varUID, String strApkNo,
                                         List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "SearchAreaAndStoreInfo");
        soapReq.addProperty("flag", flag);
        soapReq.addProperty("areaID", areaID);
        soapReq.addProperty("strMsg", strMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("varUID", varUID);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/SearchAreaAndStoreInfo", soapEnvelope,
                        headers);
            } else {
                httpTransport.call("http://tempuri.org/SearchAreaAndStoreInfo", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void UpdateUserErrorOrLockAsync(String intType, String strUserID, String strSignMsg,
                                           String strAuthorizationCode, String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        UpdateUserErrorOrLockAsync(intType, strUserID, strSignMsg, strAuthorizationCode, strApkNo,
                null);
    }

    public void UpdateUserErrorOrLockAsync(final String intType, final String strUserID,
                                           final String strSignMsg, final String strAuthorizationCode, final String strApkNo,
                                           final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return UpdateUserErrorOrLock(intType, strUserID, strSignMsg, strAuthorizationCode,
                        strApkNo, headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("UpdateUserErrorOrLock", result);
                }
            }
        }.execute();
    }

    public String UpdateUserErrorOrLock(String intType, String strUserID, String strSignMsg,
                                        String strAuthorizationCode, String strApkNo) {
        return UpdateUserErrorOrLock(intType, strUserID, strSignMsg, strAuthorizationCode,
                strApkNo, null);
    }

    public String UpdateUserErrorOrLock(String intType, String strUserID, String strSignMsg,
                                        String strAuthorizationCode, String strApkNo, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "UpdateUserErrorOrLock");
        soapReq.addProperty("intType", intType);
        soapReq.addProperty("strUserID", strUserID);
        soapReq.addProperty("strSignMsg", strSignMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/UpdateUserErrorOrLock", soapEnvelope,
                        headers);
            } else {
                httpTransport.call("http://tempuri.org/UpdateUserErrorOrLock", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void GetDicByListAsync(String typeList, String strMsg, String strAuthorizationCode,
                                  String varUID, String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetDicByListAsync(typeList, strMsg, strAuthorizationCode, varUID, strApkNo, null);
    }

    public void GetDicByListAsync(final String typeList, final String strMsg,
                                  final String strAuthorizationCode, final String varUID, final String strApkNo,
                                  final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return GetDicByList(typeList, strMsg, strAuthorizationCode, varUID, strApkNo,
                        headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("GetDicByList", result);
                }
            }
        }.execute();
    }

    public String GetDicByList(String typeList, String strMsg, String strAuthorizationCode,
                               String varUID, String strApkNo) {
        return GetDicByList(typeList, strMsg, strAuthorizationCode, varUID, strApkNo, null);
    }

    public String GetDicByList(String typeList, String strMsg, String strAuthorizationCode,
                               String varUID, String strApkNo, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "GetDicByList");
        soapReq.addProperty("typeList", typeList);
        soapReq.addProperty("strMsg", strMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("varUID", varUID);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/GetDicByList", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/GetDicByList", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void GetDicValueByCEAsync(String varItemE, String varDicDescE, String strMsg,
                                     String strAuthorizationCode, String varUID, String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetDicValueByCEAsync(varItemE, varDicDescE, strMsg, strAuthorizationCode, varUID, strApkNo,
                null);
    }

    public void GetDicValueByCEAsync(final String varItemE, final String varDicDescE,
                                     final String strMsg, final String strAuthorizationCode, final String varUID,
                                     final String strApkNo, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return GetDicValueByCE(varItemE, varDicDescE, strMsg, strAuthorizationCode, varUID,
                        strApkNo, headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("GetDicValueByCE", result);
                }
            }
        }.execute();
    }

    public String GetDicValueByCE(String varItemE, String varDicDescE, String strMsg,
                                  String strAuthorizationCode, String varUID, String strApkNo) {
        return GetDicValueByCE(varItemE, varDicDescE, strMsg, strAuthorizationCode, varUID,
                strApkNo, null);
    }

    public String GetDicValueByCE(String varItemE, String varDicDescE, String strMsg,
                                  String strAuthorizationCode, String varUID, String strApkNo,
                                  List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        Log.d("vidic", "GetDicValueByCE");
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "GetDicValueByCE");
        soapReq.addProperty("varItemE", varItemE);
        soapReq.addProperty("varDicDescE", varDicDescE);
        soapReq.addProperty("strMsg", strMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("varUID", varUID);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/GetDicValueByCE", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/GetDicValueByCE", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void GetDicRemarksByValueAsync(String varItemE, String varDicValue, String strMsg,
                                          String strAuthorizationCode, String varUID, String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetDicRemarksByValueAsync(varItemE, varDicValue, strMsg, strAuthorizationCode, varUID,
                strApkNo, null);
    }

    public void GetDicRemarksByValueAsync(final String varItemE, final String varDicValue,
                                          final String strMsg, final String strAuthorizationCode, final String varUID,
                                          final String strApkNo, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return GetDicRemarksByValue(varItemE, varDicValue, strMsg, strAuthorizationCode,
                        varUID, strApkNo, headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("GetDicRemarksByValue", result);
                }
            }
        }.execute();
    }

    public String GetDicRemarksByValue(String varItemE, String varDicValue, String strMsg,
                                       String strAuthorizationCode, String varUID, String strApkNo) {
        return GetDicRemarksByValue(varItemE, varDicValue, strMsg, strAuthorizationCode, varUID,
                strApkNo, null);
    }

    public String GetDicRemarksByValue(String varItemE, String varDicValue, String strMsg,
                                       String strAuthorizationCode, String varUID, String strApkNo,
                                       List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "GetDicRemarksByValue");
        soapReq.addProperty("varItemE", varItemE);
        soapReq.addProperty("varDicValue", varDicValue);
        soapReq.addProperty("strMsg", strMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("varUID", varUID);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport
                        .call("http://tempuri.org/GetDicRemarksByValue", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/GetDicRemarksByValue", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void GetDicRemarksByDescEAndValueAsync(String varItemE, String varDicDescE,
                                                  String varDicValue, String strMsg, String strAuthorizationCode, String varUID,
                                                  String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetDicRemarksByDescEAndValueAsync(varItemE, varDicDescE, varDicValue, strMsg,
                strAuthorizationCode, varUID, strApkNo, null);
    }

    public void GetDicRemarksByDescEAndValueAsync(final String varItemE, final String varDicDescE,
                                                  final String varDicValue, final String strMsg, final String strAuthorizationCode,
                                                  final String varUID, final String strApkNo, final List<HeaderProperty> headers)
            throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return GetDicRemarksByDescEAndValue(varItemE, varDicDescE, varDicValue, strMsg,
                        strAuthorizationCode, varUID, strApkNo, headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("GetDicRemarksByDescEAndValue", result);
                }
            }
        }.execute();
    }

    public String GetDicRemarksByDescEAndValue(String varItemE, String varDicDescE,
                                               String varDicValue, String strMsg, String strAuthorizationCode, String varUID,
                                               String strApkNo) {
        return GetDicRemarksByDescEAndValue(varItemE, varDicDescE, varDicValue, strMsg,
                strAuthorizationCode, varUID, strApkNo, null);
    }

    public String GetDicRemarksByDescEAndValue(String varItemE, String varDicDescE,
                                               String varDicValue, String strMsg, String strAuthorizationCode, String varUID,
                                               String strApkNo, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "GetDicRemarksByDescEAndValue");
        soapReq.addProperty("varItemE", varItemE);
        soapReq.addProperty("varDicDescE", varDicDescE);
        soapReq.addProperty("varDicValue", varDicValue);
        soapReq.addProperty("strMsg", strMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("varUID", varUID);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/GetDicRemarksByDescEAndValue", soapEnvelope,
                        headers);
            } else {
                httpTransport.call("http://tempuri.org/GetDicRemarksByDescEAndValue", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void GetProStyleAsync(String varUID, String strMsg, String strAuthorizationCode,
                                 String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetProStyleAsync(varUID, strMsg, strAuthorizationCode, strApkNo, null);
    }

    public void GetProStyleAsync(final String varUID, final String strMsg,
                                 final String strAuthorizationCode, final String strApkNo,
                                 final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return GetProStyle(varUID, strMsg, strAuthorizationCode, strApkNo, headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("GetProStyle", result);
                }
            }
        }.execute();
    }

    public String GetProStyle(String varUID, String strMsg, String strAuthorizationCode,
                              String strApkNo) {
        return GetProStyle(varUID, strMsg, strAuthorizationCode, strApkNo, null);
    }

    public String GetProStyle(String varUID, String strMsg, String strAuthorizationCode,
                              String strApkNo, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "GetProStyle");
        soapReq.addProperty("varUID", varUID);
        soapReq.addProperty("strMsg", strMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/GetProStyle", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/GetProStyle", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void GetProByTypeAsync(String varProStyle, String flag, String strMsg,
                                  String strAuthorizationCode, String varUID, String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetProByTypeAsync(varProStyle, flag, strMsg, strAuthorizationCode, varUID, strApkNo, null);
    }

    public void GetProByTypeAsync(final String varProStyle, final String flag, final String strMsg,
                                  final String strAuthorizationCode, final String varUID, final String strApkNo,
                                  final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return GetProByType(varProStyle, flag, strMsg, strAuthorizationCode, varUID,
                        strApkNo, headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("GetProByType", result);
                }
            }
        }.execute();
    }

    public String GetProByType(String varProStyle, String flag, String strMsg,
                               String strAuthorizationCode, String varUID, String strApkNo) {
        return GetProByType(varProStyle, flag, strMsg, strAuthorizationCode, varUID, strApkNo, null);
    }

    public String GetProByType(String varProStyle, String flag, String strMsg,
                               String strAuthorizationCode, String varUID, String strApkNo,
                               List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "GetProByType");
        soapReq.addProperty("varProStyle", varProStyle);
        soapReq.addProperty("flag", flag);
        soapReq.addProperty("strMsg", strMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("varUID", varUID);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/GetProByType", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/GetProByType", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void GetCarryInfoAsync(String varOrderNO, String strMsg, String strAuthorizationCode,
                                  String varUID, String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetCarryInfoAsync(varOrderNO, strMsg, strAuthorizationCode, varUID, strApkNo, null);
    }

    public void GetCarryInfoAsync(final String varOrderNO, final String strMsg,
                                  final String strAuthorizationCode, final String varUID, final String strApkNo,
                                  final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return GetCarryInfo(varOrderNO, strMsg, strAuthorizationCode, varUID, strApkNo,
                        headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("GetCarryInfo", result);
                }
            }
        }.execute();
    }

    public String GetCarryInfo(String varOrderNO, String strMsg, String strAuthorizationCode,
                               String varUID, String strApkNo) {
        return GetCarryInfo(varOrderNO, strMsg, strAuthorizationCode, varUID, strApkNo, null);
    }

    public String GetCarryInfo(String varOrderNO, String strMsg, String strAuthorizationCode,
                               String varUID, String strApkNo, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "GetCarryInfo");
        soapReq.addProperty("varOrderNO", varOrderNO);
        soapReq.addProperty("strMsg", strMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("varUID", varUID);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/GetCarryInfo", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/GetCarryInfo", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void GetUserModelAsync(String varUserID, String strMsg, String strAuthorizationCode,
                                  String varLoginUID, String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetUserModelAsync(varUserID, strMsg, strAuthorizationCode, varLoginUID, strApkNo, null);
    }

    public void GetUserModelAsync(final String varUserID, final String strMsg,
                                  final String strAuthorizationCode, final String varLoginUID, final String strApkNo,
                                  final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return GetUserModel(varUserID, strMsg, strAuthorizationCode, varLoginUID, strApkNo,
                        headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("GetUserModel", result);
                }
            }
        }.execute();
    }

    public String GetUserModel(String varUserID, String strMsg, String strAuthorizationCode,
                               String varLoginUID, String strApkNo) {
        return GetUserModel(varUserID, strMsg, strAuthorizationCode, varLoginUID, strApkNo, null);
    }

    public String GetUserModel(String varUserID, String strMsg, String strAuthorizationCode,
                               String varLoginUID, String strApkNo, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "GetUserModel");
        soapReq.addProperty("varUserID", varUserID);
        soapReq.addProperty("strMsg", strMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("varLoginUID", varLoginUID);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/GetUserModel", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/GetUserModel", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void GetUserNodeModelAsync(String varUID, String strMsg, String strAuthorizationCode,
                                      String varLoginUID, String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetUserNodeModelAsync(varUID, strMsg, strAuthorizationCode, varLoginUID, strApkNo, null);
    }

    public void GetUserNodeModelAsync(final String varUID, final String strMsg,
                                      final String strAuthorizationCode, final String varLoginUID, final String strApkNo,
                                      final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return GetUserNodeModel(varUID, strMsg, strAuthorizationCode, varLoginUID,
                        strApkNo, headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("GetUserNodeModel", result);
                }
            }
        }.execute();
    }

    public String GetUserNodeModel(String varUID, String strMsg, String strAuthorizationCode,
                                   String varLoginUID, String strApkNo) {
        return GetUserNodeModel(varUID, strMsg, strAuthorizationCode, varLoginUID, strApkNo, null);
    }

    public String GetUserNodeModel(String varUID, String strMsg, String strAuthorizationCode,
                                   String varLoginUID, String strApkNo, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "GetUserNodeModel");
        soapReq.addProperty("varUID", varUID);
        soapReq.addProperty("strMsg", strMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("varLoginUID", varLoginUID);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/GetUserNodeModel", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/GetUserNodeModel", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void GetRPByUIDAsync(String varUID, String strMsg, String strAuthorizationCode,
                                String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetRPByUIDAsync(varUID, strMsg, strAuthorizationCode, strApkNo, null);
    }

    public void GetRPByUIDAsync(final String varUID, final String strMsg,
                                final String strAuthorizationCode, final String strApkNo,
                                final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return GetRPByUID(varUID, strMsg, strAuthorizationCode, strApkNo, headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("GetRPByUID", result);
                }
            }
        }.execute();
    }

    public String GetRPByUID(String varUID, String strMsg, String strAuthorizationCode,
                             String strApkNo) {
        return GetRPByUID(varUID, strMsg, strAuthorizationCode, strApkNo, null);
    }

    public String GetRPByUID(String varUID, String strMsg, String strAuthorizationCode,
                             String strApkNo, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "GetRPByUID");
        soapReq.addProperty("varUID", varUID);
        soapReq.addProperty("strMsg", strMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/GetRPByUID", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/GetRPByUID", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void GetUserNodeModelReportAsync(String varUID, String strMsg,
                                            String strAuthorizationCode, String varLoginUID, String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetUserNodeModelReportAsync(varUID, strMsg, strAuthorizationCode, varLoginUID, strApkNo,
                null);
    }

    public void GetUserNodeModelReportAsync(final String varUID, final String strMsg,
                                            final String strAuthorizationCode, final String varLoginUID, final String strApkNo,
                                            final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return GetUserNodeModelReport(varUID, strMsg, strAuthorizationCode, varLoginUID,
                        strApkNo, headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("GetUserNodeModelReport", result);
                }
            }
        }.execute();
    }

    public String GetUserNodeModelReport(String varUID, String strMsg, String strAuthorizationCode,
                                         String varLoginUID, String strApkNo) {
        return GetUserNodeModelReport(varUID, strMsg, strAuthorizationCode, varLoginUID, strApkNo,
                null);
    }

    public String GetUserNodeModelReport(String varUID, String strMsg, String strAuthorizationCode,
                                         String varLoginUID, String strApkNo, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "GetUserNodeModelReport");
        soapReq.addProperty("varUID", varUID);
        soapReq.addProperty("strMsg", strMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("varLoginUID", varLoginUID);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/GetUserNodeModelReport", soapEnvelope,
                        headers);
            } else {
                httpTransport.call("http://tempuri.org/GetUserNodeModelReport", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void VerificationActivateCodeAsync(String varUserID, String strSignMsg,
                                              String strAuthorizationCode, String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        VerificationActivateCodeAsync(varUserID, strSignMsg, strAuthorizationCode, strApkNo, null);
    }

    public void VerificationActivateCodeAsync(final String varUserID, final String strSignMsg,
                                              final String strAuthorizationCode, final String strApkNo,
                                              final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return VerificationActivateCode(varUserID, strSignMsg, strAuthorizationCode,
                        strApkNo, headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("VerificationActivateCode", result);
                }
            }
        }.execute();
    }

    public String VerificationActivateCode(String varUserID, String strSignMsg,
                                           String strAuthorizationCode, String strApkNo) {
        return VerificationActivateCode(varUserID, strSignMsg, strAuthorizationCode, strApkNo, null);
    }

    public String VerificationActivateCode(String varUserID, String strSignMsg,
                                           String strAuthorizationCode, String strApkNo, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "VerificationActivateCode");
        soapReq.addProperty("varUserID", varUserID);
        soapReq.addProperty("strSignMsg", strSignMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/VerificationActivateCode", soapEnvelope,
                        headers);
            } else {
                httpTransport.call("http://tempuri.org/VerificationActivateCode", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void GetAgreementAsync(String varUserID, String strSignMsg, String strAuthorizationCode,
                                  String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetAgreementAsync(varUserID, strSignMsg, strAuthorizationCode, strApkNo, null);
    }

    public void GetAgreementAsync(final String varUserID, final String strSignMsg,
                                  final String strAuthorizationCode, final String strApkNo,
                                  final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return GetAgreement(varUserID, strSignMsg, strAuthorizationCode, strApkNo, headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("GetAgreement", result);
                }
            }
        }.execute();
    }

    public String GetAgreement(String varUserID, String strSignMsg, String strAuthorizationCode,
                               String strApkNo) {
        return GetAgreement(varUserID, strSignMsg, strAuthorizationCode, strApkNo, null);
    }

    public String GetAgreement(String varUserID, String strSignMsg, String strAuthorizationCode,
                               String strApkNo, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "GetAgreement");
        soapReq.addProperty("varUserID", varUserID);
        soapReq.addProperty("strSignMsg", strSignMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/GetAgreement", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/GetAgreement", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void AgreementAddAsync(String varUserID, String strSignMsg, String strAuthorizationCode,
                                  String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        AgreementAddAsync(varUserID, strSignMsg, strAuthorizationCode, strApkNo, null);
    }

    public void AgreementAddAsync(final String varUserID, final String strSignMsg,
                                  final String strAuthorizationCode, final String strApkNo,
                                  final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return AgreementAdd(varUserID, strSignMsg, strAuthorizationCode, strApkNo, headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("AgreementAdd", result);
                }
            }
        }.execute();
    }

    public String AgreementAdd(String varUserID, String strSignMsg, String strAuthorizationCode,
                               String strApkNo) {
        return AgreementAdd(varUserID, strSignMsg, strAuthorizationCode, strApkNo, null);
    }

    public String AgreementAdd(String varUserID, String strSignMsg, String strAuthorizationCode,
                               String strApkNo, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "AgreementAdd");
        soapReq.addProperty("varUserID", varUserID);
        soapReq.addProperty("strSignMsg", strSignMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/AgreementAdd", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/AgreementAdd", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void GetAgreementInfoAsync(String varUserID, String strSignMsg,
                                      String strAuthorizationCode, String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetAgreementInfoAsync(varUserID, strSignMsg, strAuthorizationCode, strApkNo, null);
    }

    public void GetAgreementInfoAsync(final String varUserID, final String strSignMsg,
                                      final String strAuthorizationCode, final String strApkNo,
                                      final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return GetAgreementInfo(varUserID, strSignMsg, strAuthorizationCode, strApkNo,
                        headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("GetAgreementInfo", result);
                }
            }
        }.execute();
    }

    public String GetAgreementInfo(String varUserID, String strSignMsg,
                                   String strAuthorizationCode, String strApkNo) {
        return GetAgreementInfo(varUserID, strSignMsg, strAuthorizationCode, strApkNo, null);
    }

    public String GetAgreementInfo(String varUserID, String strSignMsg,
                                   String strAuthorizationCode, String strApkNo, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "GetAgreementInfo");
        soapReq.addProperty("varUserID", varUserID);
        soapReq.addProperty("strSignMsg", strSignMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/GetAgreementInfo", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/GetAgreementInfo", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void AgreementUpdateAsync(String varUserID, String varMobile, String activateCode,
                                     String strSignMsg, String strAuthorizationCode, String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        AgreementUpdateAsync(varUserID, varMobile, activateCode, strSignMsg, strAuthorizationCode,
                strApkNo, null);
    }

    public void AgreementUpdateAsync(final String varUserID, final String varMobile,
                                     final String activateCode, final String strSignMsg, final String strAuthorizationCode,
                                     final String strApkNo, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return AgreementUpdate(varUserID, varMobile, activateCode, strSignMsg,
                        strAuthorizationCode, strApkNo, headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("AgreementUpdate", result);
                }
            }
        }.execute();
    }

    public String AgreementUpdate(String varUserID, String varMobile, String activateCode,
                                  String strSignMsg, String strAuthorizationCode, String strApkNo) {
        return AgreementUpdate(varUserID, varMobile, activateCode, strSignMsg,
                strAuthorizationCode, strApkNo, null);
    }

    public String AgreementUpdate(String varUserID, String varMobile, String activateCode,
                                  String strSignMsg, String strAuthorizationCode, String strApkNo,
                                  List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "AgreementUpdate");
        soapReq.addProperty("varUserID", varUserID);
        soapReq.addProperty("varMobile", varMobile);
        soapReq.addProperty("activateCode", activateCode);
        soapReq.addProperty("strSignMsg", strSignMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/AgreementUpdate", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/AgreementUpdate", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void VerificationQualificationsCertificationAsync(String varUID, String strSignMsg,
                                                             String strAuthorizationCode, String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        VerificationQualificationsCertificationAsync(varUID, strSignMsg, strAuthorizationCode,
                strApkNo, null);
    }

    public void VerificationQualificationsCertificationAsync(final String varUID,
                                                             final String strSignMsg, final String strAuthorizationCode, final String strApkNo,
                                                             final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return VerificationQualificationsCertification(varUID, strSignMsg,
                        strAuthorizationCode, strApkNo, headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("VerificationQualificationsCertification",
                            result);
                }
            }
        }.execute();
    }

    public String VerificationQualificationsCertification(String varUID, String strSignMsg,
                                                          String strAuthorizationCode, String strApkNo) {
        return VerificationQualificationsCertification(varUID, strSignMsg, strAuthorizationCode,
                strApkNo, null);
    }

    public String VerificationQualificationsCertification(String varUID, String strSignMsg,
                                                          String strAuthorizationCode, String strApkNo, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/",
                "VerificationQualificationsCertification");
        soapReq.addProperty("varUID", varUID);
        soapReq.addProperty("strSignMsg", strSignMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/VerificationQualificationsCertification",
                        soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/VerificationQualificationsCertification",
                        soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void QualificationCertificationConfirmationAsync(String varUID, String strSignMsg,
                                                            String strAuthorizationCode, String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        QualificationCertificationConfirmationAsync(varUID, strSignMsg, strAuthorizationCode,
                strApkNo, null);
    }

    public void QualificationCertificationConfirmationAsync(final String varUID,
                                                            final String strSignMsg, final String strAuthorizationCode, final String strApkNo,
                                                            final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return QualificationCertificationConfirmation(varUID, strSignMsg,
                        strAuthorizationCode, strApkNo, headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler
                            .Wsdl2CodeFinished("QualificationCertificationConfirmation", result);
                }
            }
        }.execute();
    }

    public String QualificationCertificationConfirmation(String varUID, String strSignMsg,
                                                         String strAuthorizationCode, String strApkNo) {
        return QualificationCertificationConfirmation(varUID, strSignMsg, strAuthorizationCode,
                strApkNo, null);
    }

    public String QualificationCertificationConfirmation(String varUID, String strSignMsg,
                                                         String strAuthorizationCode, String strApkNo, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/",
                "QualificationCertificationConfirmation");
        soapReq.addProperty("varUID", varUID);
        soapReq.addProperty("strSignMsg", strSignMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/QualificationCertificationConfirmation",
                        soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/QualificationCertificationConfirmation",
                        soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void GetQualificationCertificationInfoAsync(String varUserID, String strSignMsg,
                                                       String strAuthorizationCode, String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetQualificationCertificationInfoAsync(varUserID, strSignMsg, strAuthorizationCode,
                strApkNo, null);
    }

    public void GetQualificationCertificationInfoAsync(final String varUserID,
                                                       final String strSignMsg, final String strAuthorizationCode, final String strApkNo,
                                                       final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return GetQualificationCertificationInfo(varUserID, strSignMsg,
                        strAuthorizationCode, strApkNo, headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("GetQualificationCertificationInfo", result);
                }
            }
        }.execute();
    }

    public String GetQualificationCertificationInfo(String varUserID, String strSignMsg,
                                                    String strAuthorizationCode, String strApkNo) {
        return GetQualificationCertificationInfo(varUserID, strSignMsg, strAuthorizationCode,
                strApkNo, null);
    }

    public String GetQualificationCertificationInfo(String varUserID, String strSignMsg,
                                                    String strAuthorizationCode, String strApkNo, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/",
                "GetQualificationCertificationInfo");
        soapReq.addProperty("varUserID", varUserID);
        soapReq.addProperty("strSignMsg", strSignMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/GetQualificationCertificationInfo",
                        soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/GetQualificationCertificationInfo",
                        soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void GetQualificationsCertificationAsync(String varUID, String strSignMsg,
                                                    String strAuthorizationCode, String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetQualificationsCertificationAsync(varUID, strSignMsg, strAuthorizationCode, strApkNo,
                null);
    }

    public void GetQualificationsCertificationAsync(final String varUID, final String strSignMsg,
                                                    final String strAuthorizationCode, final String strApkNo,
                                                    final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return GetQualificationsCertification(varUID, strSignMsg, strAuthorizationCode,
                        strApkNo, headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("GetQualificationsCertification", result);
                }
            }
        }.execute();
    }

    public String GetQualificationsCertification(String varUID, String strSignMsg,
                                                 String strAuthorizationCode, String strApkNo) {
        return GetQualificationsCertification(varUID, strSignMsg, strAuthorizationCode, strApkNo,
                null);
    }

    public String GetQualificationsCertification(String varUID, String strSignMsg,
                                                 String strAuthorizationCode, String strApkNo, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "GetQualificationsCertification");
        soapReq.addProperty("varUID", varUID);
        soapReq.addProperty("strSignMsg", strSignMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/GetQualificationsCertification",
                        soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/GetQualificationsCertification",
                        soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void QualificationCertificationAddAsync(String varUserID, String varShopUID,
                                                   String varProductNOs, String opPWD, String strSignMsg, String strAuthorizationCode,
                                                   String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        QualificationCertificationAddAsync(varUserID, varShopUID, varProductNOs, opPWD, strSignMsg,
                strAuthorizationCode, strApkNo, null);
    }

    public void QualificationCertificationAddAsync(final String varUserID, final String varShopUID,
                                                   final String varProductNOs, final String opPWD, final String strSignMsg,
                                                   final String strAuthorizationCode, final String strApkNo,
                                                   final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return QualificationCertificationAdd(varUserID, varShopUID, varProductNOs, opPWD,
                        strSignMsg, strAuthorizationCode, strApkNo, headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("QualificationCertificationAdd", result);
                }
            }
        }.execute();
    }

    public String QualificationCertificationAdd(String varUserID, String varShopUID,
                                                String varProductNOs, String opPWD, String strSignMsg, String strAuthorizationCode,
                                                String strApkNo) {
        return QualificationCertificationAdd(varUserID, varShopUID, varProductNOs, opPWD,
                strSignMsg, strAuthorizationCode, strApkNo, null);
    }

    public String QualificationCertificationAdd(String varUserID, String varShopUID,
                                                String varProductNOs, String opPWD, String strSignMsg, String strAuthorizationCode,
                                                String strApkNo, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "QualificationCertificationAdd");
        soapReq.addProperty("varUserID", varUserID);
        soapReq.addProperty("varShopUID", varShopUID);
        soapReq.addProperty("varProductNOs", varProductNOs);
        soapReq.addProperty("opPWD", opPWD);
        soapReq.addProperty("strSignMsg", strSignMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/QualificationCertificationAdd",
                        soapEnvelope, headers);
            } else {
                httpTransport
                        .call("http://tempuri.org/QualificationCertificationAdd", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void UserLoginServiceAsync(String logType, String userName, String strUserPwd,
                                      String strDnyPwd, String loginIP, String strSignMsg, String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        UserLoginServiceAsync(logType, userName, strUserPwd, strDnyPwd, loginIP, strSignMsg,
                strApkNo, null);
    }

    public void UserLoginServiceAsync(final String logType, final String userName,
                                      final String strUserPwd, final String strDnyPwd, final String loginIP,
                                      final String strSignMsg, final String strApkNo, final List<HeaderProperty> headers)
            throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return UserLoginService(logType, userName, strUserPwd, strDnyPwd, loginIP,
                        strSignMsg, strApkNo, headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("UserLoginService", result);
                }
            }
        }.execute();
    }

    public String UserLoginService(String logType, String userName, String strUserPwd,
                                   String strDnyPwd, String loginIP, String strSignMsg, String strApkNo) {
        return UserLoginService(logType, userName, strUserPwd, strDnyPwd, loginIP, strSignMsg,
                strApkNo, null);
    }

    public String UserLoginService(String logType, String userName, String strUserPwd,
                                   String strDnyPwd, String loginIP, String strSignMsg, String strApkNo,
                                   List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "UserLoginService");
        soapReq.addProperty("logType", logType);
        soapReq.addProperty("userName", userName);
        soapReq.addProperty("strUserPwd", strUserPwd);
        soapReq.addProperty("strDnyPwd", strDnyPwd);
        soapReq.addProperty("loginIP", loginIP);
        soapReq.addProperty("strSignMsg", strSignMsg);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/UserLoginService", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/UserLoginService", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void NoticeServiceTimeAsync(String intRondom, String strSignMsg, String strApkNo)
            throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        NoticeServiceTimeAsync(intRondom, strSignMsg, strApkNo, null);
    }

    public void NoticeServiceTimeAsync(final String intRondom, final String strSignMsg,
                                       final String strApkNo, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return NoticeServiceTime(intRondom, strSignMsg, strApkNo, headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("NoticeServiceTime", result);
                }
            }
        }.execute();
    }

    public String NoticeServiceTime(String intRondom, String strSignMsg, String strApkNo) {
        return NoticeServiceTime(intRondom, strSignMsg, strApkNo, null);
    }

    public String NoticeServiceTime(String intRondom, String strSignMsg, String strApkNo,
                                    List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "NoticeServiceTime");
        soapReq.addProperty("intRondom", intRondom);
        soapReq.addProperty("strSignMsg", strSignMsg);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/NoticeServiceTime", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/NoticeServiceTime", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void FetchNavToMobileAsync(String strUID, String strMsg, String strAuthorizationCode,
                                      String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        FetchNavToMobileAsync(strUID, strMsg, strAuthorizationCode, strApkNo, null);
    }

    public void FetchNavToMobileAsync(final String strUID, final String strMsg,
                                      final String strAuthorizationCode, final String strApkNo,
                                      final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return FetchNavToMobile(strUID, strMsg, strAuthorizationCode, strApkNo, headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("FetchNavToMobile", result);
                }
            }
        }.execute();
    }

    public String FetchNavToMobile(String strUID, String strMsg, String strAuthorizationCode,
                                   String strApkNo) {
        return FetchNavToMobile(strUID, strMsg, strAuthorizationCode, strApkNo, null);
    }

    public String FetchNavToMobile(String strUID, String strMsg, String strAuthorizationCode,
                                   String strApkNo, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "FetchNavToMobile");
        soapReq.addProperty("strUID", strUID);
        soapReq.addProperty("strMsg", strMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/FetchNavToMobile", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/FetchNavToMobile", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void SearchWalletToMobileAsync(String strUID, String strMsg,
                                          String strAuthorizationCode, String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        SearchWalletToMobileAsync(strUID, strMsg, strAuthorizationCode, strApkNo, null);
    }

    public void SearchWalletToMobileAsync(final String strUID, final String strMsg,
                                          final String strAuthorizationCode, final String strApkNo,
                                          final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return SearchWalletToMobile(strUID, strMsg, strAuthorizationCode, strApkNo, headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("SearchWalletToMobile", result);
                }
            }
        }.execute();
    }

    public String SearchWalletToMobile(String strUID, String strMsg, String strAuthorizationCode,
                                       String strApkNo) {
        return SearchWalletToMobile(strUID, strMsg, strAuthorizationCode, strApkNo, null);
    }

    public String SearchWalletToMobile(String strUID, String strMsg, String strAuthorizationCode,
                                       String strApkNo, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "SearchWalletToMobile");
        soapReq.addProperty("strUID", strUID);
        soapReq.addProperty("strMsg", strMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport
                        .call("http://tempuri.org/SearchWalletToMobile", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/SearchWalletToMobile", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public String FindUserNameToMobile(String strUserID, String strMsg,
                                       String strAuthorizationCode, String varUID, String strApkNo) {
        return FindUserNameToMobile(strUserID, strMsg, strAuthorizationCode, varUID, strApkNo, null);
    }

    public String FindUserNameToMobile(String strUserID, String strMsg,
                                       String strAuthorizationCode, String varUID, String strApkNo,
                                       List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "FindUserNameToMobile");
        soapReq.addProperty("strUserID", strUserID);
        soapReq.addProperty("strMsg", strMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("varUID", varUID);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport
                        .call("http://tempuri.org/FindUserNameToMobile", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/FindUserNameToMobile", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void InitTakeCashToMobileAsync(String strUID, String strMsg,
                                          String strAuthorizationCode, String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        InitTakeCashToMobileAsync(strUID, strMsg, strAuthorizationCode, strApkNo, null);
    }

    public void InitTakeCashToMobileAsync(final String strUID, final String strMsg,
                                          final String strAuthorizationCode, final String strApkNo,
                                          final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return InitTakeCashToMobile(strUID, strMsg, strAuthorizationCode, strApkNo, headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("InitTakeCashToMobile", result);
                }
            }
        }.execute();
    }

    public String InitTakeCashToMobile(String strUID, String strMsg, String strAuthorizationCode,
                                       String strApkNo) {
        return InitTakeCashToMobile(strUID, strMsg, strAuthorizationCode, strApkNo, null);
    }

    public String InitTakeCashToMobile(String strUID, String strMsg, String strAuthorizationCode,
                                       String strApkNo, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "InitTakeCashToMobile");
        soapReq.addProperty("strUID", strUID);
        soapReq.addProperty("strMsg", strMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport
                        .call("http://tempuri.org/InitTakeCashToMobile", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/InitTakeCashToMobile", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void TakeCashToMobileAsync(String strUID, String dTakeMoney, String strOperatePwd,
                                      String strMsg, String strAuthorizationCode, String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        TakeCashToMobileAsync(strUID, dTakeMoney, strOperatePwd, strMsg, strAuthorizationCode,
                strApkNo, null);
    }

    public void TakeCashToMobileAsync(final String strUID, final String dTakeMoney,
                                      final String strOperatePwd, final String strMsg, final String strAuthorizationCode,
                                      final String strApkNo, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return TakeCashToMobile(strUID, dTakeMoney, strOperatePwd, strMsg,
                        strAuthorizationCode, strApkNo, headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("TakeCashToMobile", result);
                }
            }
        }.execute();
    }

    public String TakeCashToMobile(String strUID, String dTakeMoney, String strOperatePwd,
                                   String strMsg, String strAuthorizationCode, String strApkNo) {
        return TakeCashToMobile(strUID, dTakeMoney, strOperatePwd, strMsg, strAuthorizationCode,
                strApkNo, null);
    }

    public String TakeCashToMobile(String strUID, String dTakeMoney, String strOperatePwd,
                                   String strMsg, String strAuthorizationCode, String strApkNo,
                                   List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "TakeCashToMobile");
        soapReq.addProperty("strUID", strUID);
        soapReq.addProperty("dTakeMoney", dTakeMoney);
        soapReq.addProperty("strOperatePwd", strOperatePwd);
        soapReq.addProperty("strMsg", strMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/TakeCashToMobile", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/TakeCashToMobile", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void InitWalletMoneyToMobileAsync(String strUID, String strWalletType, String strMsg,
                                             String strAuthorizationCode, String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        InitWalletMoneyToMobileAsync(strUID, strWalletType, strMsg, strAuthorizationCode, strApkNo,
                null);
    }

    public void InitWalletMoneyToMobileAsync(final String strUID, final String strWalletType,
                                             final String strMsg, final String strAuthorizationCode, final String strApkNo,
                                             final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return InitWalletMoneyToMobile(strUID, strWalletType, strMsg, strAuthorizationCode,
                        strApkNo, headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("InitWalletMoneyToMobile", result);
                }
            }
        }.execute();
    }

    public String InitWalletMoneyToMobile(String strUID, String strWalletType, String strMsg,
                                          String strAuthorizationCode, String strApkNo) {
        return InitWalletMoneyToMobile(strUID, strWalletType, strMsg, strAuthorizationCode,
                strApkNo, null);
    }

    public String InitWalletMoneyToMobile(String strUID, String strWalletType, String strMsg,
                                          String strAuthorizationCode, String strApkNo, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "InitWalletMoneyToMobile");
        soapReq.addProperty("strUID", strUID);
        soapReq.addProperty("strWalletType", strWalletType);
        soapReq.addProperty("strMsg", strMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/InitWalletMoneyToMobile", soapEnvelope,
                        headers);
            } else {
                httpTransport.call("http://tempuri.org/InitWalletMoneyToMobile", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void TurnMoneyToMobileAsync(String strUID, String dTurnMoney, String strUserID,
                                       String strOperatePwd, String strRemarks, String strMsg, String strAuthorizationCode,
                                       String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        TurnMoneyToMobileAsync(strUID, dTurnMoney, strUserID, strOperatePwd, strRemarks, strMsg,
                strAuthorizationCode, strApkNo, null);
    }

    public void TurnMoneyToMobileAsync(final String strUID, final String dTurnMoney,
                                       final String strUserID, final String strOperatePwd, final String strRemarks,
                                       final String strMsg, final String strAuthorizationCode, final String strApkNo,
                                       final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return TurnMoneyToMobile(strUID, dTurnMoney, strUserID, strOperatePwd, strRemarks,
                        strMsg, strAuthorizationCode, strApkNo, headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("TurnMoneyToMobile", result);
                }
            }
        }.execute();
    }

    public String TurnMoneyToMobile(String strUID, String dTurnMoney, String strUserID,
                                    String strOperatePwd, String strRemarks, String strMsg, String strAuthorizationCode,
                                    String strApkNo) {
        return TurnMoneyToMobile(strUID, dTurnMoney, strUserID, strOperatePwd, strRemarks, strMsg,
                strAuthorizationCode, strApkNo, null);
    }

    public String TurnMoneyToMobile(String strUID, String dTurnMoney, String strUserID,
                                    String strOperatePwd, String strRemarks, String strMsg, String strAuthorizationCode,
                                    String strApkNo, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "TurnMoneyToMobile");
        soapReq.addProperty("strUID", strUID);
        soapReq.addProperty("dTurnMoney", dTurnMoney);
        soapReq.addProperty("strUserID", strUserID);
        soapReq.addProperty("strOperatePwd", strOperatePwd);
        soapReq.addProperty("strRemarks", strRemarks);
        soapReq.addProperty("strMsg", strMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/TurnMoneyToMobile", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/TurnMoneyToMobile", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void TurnPointsToMobileAsync(String strUID, String dTurnPoints, String strUserID,
                                        String strOperatePwd, String strMsg, String strAuthorizationCode, String strApkNo)
            throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        TurnPointsToMobileAsync(strUID, dTurnPoints, strUserID, strOperatePwd, strMsg,
                strAuthorizationCode, strApkNo, null);
    }

    public void TurnPointsToMobileAsync(final String strUID, final String dTurnPoints,
                                        final String strUserID, final String strOperatePwd, final String strMsg,
                                        final String strAuthorizationCode, final String strApkNo,
                                        final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return TurnPointsToMobile(strUID, dTurnPoints, strUserID, strOperatePwd, strMsg,
                        strAuthorizationCode, strApkNo, headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("TurnPointsToMobile", result);
                }
            }
        }.execute();
    }

    public String TurnPointsToMobile(String strUID, String dTurnPoints, String strUserID,
                                     String strOperatePwd, String strMsg, String strAuthorizationCode, String strApkNo) {
        return TurnPointsToMobile(strUID, dTurnPoints, strUserID, strOperatePwd, strMsg,
                strAuthorizationCode, strApkNo, null);
    }

    public String TurnPointsToMobile(String strUID, String dTurnPoints, String strUserID,
                                     String strOperatePwd, String strMsg, String strAuthorizationCode, String strApkNo,
                                     List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "TurnPointsToMobile");
        soapReq.addProperty("strUID", strUID);
        soapReq.addProperty("dTurnPoints", dTurnPoints);
        soapReq.addProperty("strUserID", strUserID);
        soapReq.addProperty("strOperatePwd", strOperatePwd);
        soapReq.addProperty("strMsg", strMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/TurnPointsToMobile", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/TurnPointsToMobile", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void TurnToElectricToMobileAsync(String strWalletType, String strUID,
                                            String intTurnMoney, String varOperatPWD, String strMsg, String strAuthorizationCode,
                                            String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        TurnToElectricToMobileAsync(strWalletType, strUID, intTurnMoney, varOperatPWD, strMsg,
                strAuthorizationCode, strApkNo, null);
    }

    public void TurnToElectricToMobileAsync(final String strWalletType, final String strUID,
                                            final String intTurnMoney, final String varOperatPWD, final String strMsg,
                                            final String strAuthorizationCode, final String strApkNo,
                                            final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return TurnToElectricToMobile(strWalletType, strUID, intTurnMoney, varOperatPWD,
                        strMsg, strAuthorizationCode, strApkNo, headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("TurnToElectricToMobile", result);
                }
            }
        }.execute();
    }

    public String TurnToElectricToMobile(String strWalletType, String strUID, String intTurnMoney,
                                         String varOperatPWD, String strMsg, String strAuthorizationCode, String strApkNo) {
        return TurnToElectricToMobile(strWalletType, strUID, intTurnMoney, varOperatPWD, strMsg,
                strAuthorizationCode, strApkNo, null);
    }

    public String TurnToElectricToMobile(String strWalletType, String strUID, String intTurnMoney,
                                         String varOperatPWD, String strMsg, String strAuthorizationCode, String strApkNo,
                                         List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "TurnToElectricToMobile");
        soapReq.addProperty("strWalletType", strWalletType);
        soapReq.addProperty("strUID", strUID);
        soapReq.addProperty("intTurnMoney", intTurnMoney);
        soapReq.addProperty("varOperatPWD", varOperatPWD);
        soapReq.addProperty("strMsg", strMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/TurnToElectricToMobile", soapEnvelope,
                        headers);
            } else {
                httpTransport.call("http://tempuri.org/TurnToElectricToMobile", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void InitTransListAsync(String intRank, String strMsg, String strAuthorizationCode,
                                   String strUID, String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        InitTransListAsync(intRank, strMsg, strAuthorizationCode, strUID, strApkNo, null);
    }

    public void InitTransListAsync(final String intRank, final String strMsg,
                                   final String strAuthorizationCode, final String strUID, final String strApkNo,
                                   final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return InitTransList(intRank, strMsg, strAuthorizationCode, strUID, strApkNo,
                        headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("InitTransList", result);
                }
            }
        }.execute();
    }

    public String InitTransList(String intRank, String strMsg, String strAuthorizationCode,
                                String strUID, String strApkNo) {
        return InitTransList(intRank, strMsg, strAuthorizationCode, strUID, strApkNo, null);
    }

    public String InitTransList(String intRank, String strMsg, String strAuthorizationCode,
                                String strUID, String strApkNo, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "InitTransList");
        soapReq.addProperty("intRank", intRank);
        soapReq.addProperty("strMsg", strMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("strUID", strUID);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/InitTransList", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/InitTransList", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void PageSearchTransListAsync(String strUID, String intRank, String strWalletType,
                                         String strTradeType, String strStartDate, String strEndDate, String intPageSize,
                                         String intPageIndex, String strMsg, String strAuthorizationCode, String strApkNo)
            throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        PageSearchTransListAsync(strUID, intRank, strWalletType, strTradeType, strStartDate,
                strEndDate, intPageSize, intPageIndex, strMsg, strAuthorizationCode, strApkNo, null);
    }

    public void PageSearchTransListAsync(final String strUID, final String intRank,
                                         final String strWalletType, final String strTradeType, final String strStartDate,
                                         final String strEndDate, final String intPageSize, final String intPageIndex,
                                         final String strMsg, final String strAuthorizationCode, final String strApkNo,
                                         final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return PageSearchTransList(strUID, intRank, strWalletType, strTradeType,
                        strStartDate, strEndDate, intPageSize, intPageIndex, strMsg,
                        strAuthorizationCode, strApkNo, headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("PageSearchTransList", result);
                }
            }
        }.execute();
    }

    public String PageSearchTransList(String strUID, String intRank, String strWalletType,
                                      String strTradeType, String strStartDate, String strEndDate, String intPageSize,
                                      String intPageIndex, String strMsg, String strAuthorizationCode, String strApkNo) {
        return PageSearchTransList(strUID, intRank, strWalletType, strTradeType, strStartDate,
                strEndDate, intPageSize, intPageIndex, strMsg, strAuthorizationCode, strApkNo, null);
    }

    public String PageSearchTransList(String strUID, String intRank, String strWalletType,
                                      String strTradeType, String strStartDate, String strEndDate, String intPageSize,
                                      String intPageIndex, String strMsg, String strAuthorizationCode, String strApkNo,
                                      List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "PageSearchTransList");
        soapReq.addProperty("strUID", strUID);
        soapReq.addProperty("intRank", intRank);
        soapReq.addProperty("strWalletType", strWalletType);
        soapReq.addProperty("strTradeType", strTradeType);
        soapReq.addProperty("strStartDate", strStartDate);
        soapReq.addProperty("strEndDate", strEndDate);
        soapReq.addProperty("intPageSize", intPageSize);
        soapReq.addProperty("intPageIndex", intPageIndex);
        soapReq.addProperty("strMsg", strMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/PageSearchTransList", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/PageSearchTransList", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void SearchHistoryBonusAsync(String strUID, String strMsg, String strAuthorizationCode,
                                        String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        SearchHistoryBonusAsync(strUID, strMsg, strAuthorizationCode, strApkNo, null);
    }

    public void SearchHistoryBonusAsync(final String strUID, final String strMsg,
                                        final String strAuthorizationCode, final String strApkNo,
                                        final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return SearchHistoryBonus(strUID, strMsg, strAuthorizationCode, strApkNo, headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("SearchHistoryBonus", result);
                }
            }
        }.execute();
    }

    public String SearchHistoryBonus(String strUID, String strMsg, String strAuthorizationCode,
                                     String strApkNo) {
        return SearchHistoryBonus(strUID, strMsg, strAuthorizationCode, strApkNo, null);
    }

    public String SearchHistoryBonus(String strUID, String strMsg, String strAuthorizationCode,
                                     String strApkNo, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "SearchHistoryBonus");
        soapReq.addProperty("strUID", strUID);
        soapReq.addProperty("strMsg", strMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/SearchHistoryBonus", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/SearchHistoryBonus", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void GetUserWageByTicketAsync(String varUID, String strMsg, String strAuthorizationCode,
                                         String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetUserWageByTicketAsync(varUID, strMsg, strAuthorizationCode, strApkNo, null);
    }

    public void GetUserWageByTicketAsync(final String varUID, final String strMsg,
                                         final String strAuthorizationCode, final String strApkNo,
                                         final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return GetUserWageByTicket(varUID, strMsg, strAuthorizationCode, strApkNo, headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("GetUserWageByTicket", result);
                }
            }
        }.execute();
    }

    public String GetUserWageByTicket(String varUID, String strMsg, String strAuthorizationCode,
                                      String strApkNo) {
        return GetUserWageByTicket(varUID, strMsg, strAuthorizationCode, strApkNo, null);
    }

    public String GetUserWageByTicket(String varUID, String strMsg, String strAuthorizationCode,
                                      String strApkNo, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "GetUserWageByTicket");
        soapReq.addProperty("varUID", varUID);
        soapReq.addProperty("strMsg", strMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/GetUserWageByTicket", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/GetUserWageByTicket", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void GetUserWageAsync(String varUID, String strWalletType, String strMsg,
                                 String strAuthorizationCode, String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetUserWageAsync(varUID, strWalletType, strMsg, strAuthorizationCode, strApkNo, null);
    }

    public void GetUserWageAsync(final String varUID, final String strWalletType,
                                 final String strMsg, final String strAuthorizationCode, final String strApkNo,
                                 final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return GetUserWage(varUID, strWalletType, strMsg, strAuthorizationCode, strApkNo,
                        headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("GetUserWage", result);
                }
            }
        }.execute();
    }

    public String GetUserWage(String varUID, String strWalletType, String strMsg,
                              String strAuthorizationCode, String strApkNo) {
        return GetUserWage(varUID, strWalletType, strMsg, strAuthorizationCode, strApkNo, null);
    }

    public String GetUserWage(String varUID, String strWalletType, String strMsg,
                              String strAuthorizationCode, String strApkNo, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "GetUserWage");
        soapReq.addProperty("varUID", varUID);
        soapReq.addProperty("strWalletType", strWalletType);
        soapReq.addProperty("strMsg", strMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/GetUserWage", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/GetUserWage", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void GetHistoryNewSalesAsync(String varUID, String strMsg, String strAuthorizationCode,
                                        String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetHistoryNewSalesAsync(varUID, strMsg, strAuthorizationCode, strApkNo, null);
    }

    public void GetHistoryNewSalesAsync(final String varUID, final String strMsg,
                                        final String strAuthorizationCode, final String strApkNo,
                                        final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return GetHistoryNewSales(varUID, strMsg, strAuthorizationCode, strApkNo, headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("GetHistoryNewSales", result);
                }
            }
        }.execute();
    }

    public String GetHistoryNewSales(String varUID, String strMsg, String strAuthorizationCode,
                                     String strApkNo) {
        return GetHistoryNewSales(varUID, strMsg, strAuthorizationCode, strApkNo, null);
    }

    public String GetHistoryNewSales(String varUID, String strMsg, String strAuthorizationCode,
                                     String strApkNo, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "GetHistoryNewSales");
        soapReq.addProperty("varUID", varUID);
        soapReq.addProperty("strMsg", strMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/GetHistoryNewSales", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/GetHistoryNewSales", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void PayFee_ToMobileAsync(String varUID, String varOpPwd, String chrPayType,
                                     String chrAccountType, String decPayMoney, String varPayUserID, String varRemark,
                                     String strMsg, String strAuthorizationCode, String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        PayFee_ToMobileAsync(varUID, varOpPwd, chrPayType, chrAccountType, decPayMoney,
                varPayUserID, varRemark, strMsg, strAuthorizationCode, strApkNo, null);
    }

    public void PayFee_ToMobileAsync(final String varUID, final String varOpPwd,
                                     final String chrPayType, final String chrAccountType, final String decPayMoney,
                                     final String varPayUserID, final String varRemark, final String strMsg,
                                     final String strAuthorizationCode, final String strApkNo,
                                     final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return PayFee_ToMobile(varUID, varOpPwd, chrPayType, chrAccountType, decPayMoney,
                        varPayUserID, varRemark, strMsg, strAuthorizationCode, strApkNo, headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("PayFee_ToMobile", result);
                }
            }
        }.execute();
    }

    public String PayFee_ToMobile(String varUID, String varOpPwd, String chrPayType,
                                  String chrAccountType, String decPayMoney, String varPayUserID, String varRemark,
                                  String strMsg, String strAuthorizationCode, String strApkNo) {
        return PayFee_ToMobile(varUID, varOpPwd, chrPayType, chrAccountType, decPayMoney,
                varPayUserID, varRemark, strMsg, strAuthorizationCode, strApkNo, null);
    }

    public String PayFee_ToMobile(String varUID, String varOpPwd, String chrPayType,
                                  String chrAccountType, String decPayMoney, String varPayUserID, String varRemark,
                                  String strMsg, String strAuthorizationCode, String strApkNo,
                                  List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "PayFee_ToMobile");
        soapReq.addProperty("varUID", varUID);
        soapReq.addProperty("varOpPwd", varOpPwd);
        soapReq.addProperty("chrPayType", chrPayType);
        soapReq.addProperty("chrAccountType", chrAccountType);
        soapReq.addProperty("decPayMoney", decPayMoney);
        soapReq.addProperty("varPayUserID", varPayUserID);
        soapReq.addProperty("varRemark", varRemark);
        soapReq.addProperty("strMsg", strMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/PayFee_ToMobile", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/PayFee_ToMobile", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void GetPayFeeListAsync(String varUID, String varPayCode, String chrPayItem,
                                   String chrStatus, String chrAccountType, String pageSize, String pageIndex,
                                   String strMsg, String strAuthorizationCode, String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetPayFeeListAsync(varUID, varPayCode, chrPayItem, chrStatus, chrAccountType, pageSize,
                pageIndex, strMsg, strAuthorizationCode, strApkNo, null);
    }

    public void GetPayFeeListAsync(final String varUID, final String varPayCode,
                                   final String chrPayItem, final String chrStatus, final String chrAccountType,
                                   final String pageSize, final String pageIndex, final String strMsg,
                                   final String strAuthorizationCode, final String strApkNo,
                                   final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return GetPayFeeList(varUID, varPayCode, chrPayItem, chrStatus, chrAccountType,
                        pageSize, pageIndex, strMsg, strAuthorizationCode, strApkNo, headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("GetPayFeeList", result);
                }
            }
        }.execute();
    }

    public String GetPayFeeList(String varUID, String varPayCode, String chrPayItem,
                                String chrStatus, String chrAccountType, String pageSize, String pageIndex,
                                String strMsg, String strAuthorizationCode, String strApkNo) {
        return GetPayFeeList(varUID, varPayCode, chrPayItem, chrStatus, chrAccountType, pageSize,
                pageIndex, strMsg, strAuthorizationCode, strApkNo, null);
    }

    public String GetPayFeeList(String varUID, String varPayCode, String chrPayItem,
                                String chrStatus, String chrAccountType, String pageSize, String pageIndex,
                                String strMsg, String strAuthorizationCode, String strApkNo,
                                List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "GetPayFeeList");
        soapReq.addProperty("varUID", varUID);
        soapReq.addProperty("varPayCode", varPayCode);
        soapReq.addProperty("chrPayItem", chrPayItem);
        soapReq.addProperty("chrStatus", chrStatus);
        soapReq.addProperty("chrAccountType", chrAccountType);
        soapReq.addProperty("pageSize", pageSize);
        soapReq.addProperty("pageIndex", pageIndex);
        soapReq.addProperty("strMsg", strMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/GetPayFeeList", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/GetPayFeeList", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void SearchQuestionByUIDAsync(String strUID, String strMsg, String strAuthorizationCode,
                                         String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        SearchQuestionByUIDAsync(strUID, strMsg, strAuthorizationCode, strApkNo, null);
    }

    public void SearchQuestionByUIDAsync(final String strUID, final String strMsg,
                                         final String strAuthorizationCode, final String strApkNo,
                                         final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return SearchQuestionByUID(strUID, strMsg, strAuthorizationCode, strApkNo, headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("SearchQuestionByUID", result);
                }
            }
        }.execute();
    }

    public String SearchQuestionByUID(String strUID, String strMsg, String strAuthorizationCode,
                                      String strApkNo) {
        return SearchQuestionByUID(strUID, strMsg, strAuthorizationCode, strApkNo, null);
    }

    public String SearchQuestionByUID(String strUID, String strMsg, String strAuthorizationCode,
                                      String strApkNo, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "SearchQuestionByUID");
        soapReq.addProperty("strUID", strUID);
        soapReq.addProperty("strMsg", strMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/SearchQuestionByUID", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/SearchQuestionByUID", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void LoadQuestionInfoAsync(String questionID, String strMsg,
                                      String strAuthorizationCode, String strUID, String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        LoadQuestionInfoAsync(questionID, strMsg, strAuthorizationCode, strUID, strApkNo, null);
    }

    public void LoadQuestionInfoAsync(final String questionID, final String strMsg,
                                      final String strAuthorizationCode, final String strUID, final String strApkNo,
                                      final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return LoadQuestionInfo(questionID, strMsg, strAuthorizationCode, strUID, strApkNo,
                        headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("LoadQuestionInfo", result);
                }
            }
        }.execute();
    }

    public String LoadQuestionInfo(String questionID, String strMsg, String strAuthorizationCode,
                                   String strUID, String strApkNo) {
        return LoadQuestionInfo(questionID, strMsg, strAuthorizationCode, strUID, strApkNo, null);
    }

    public String LoadQuestionInfo(String questionID, String strMsg, String strAuthorizationCode,
                                   String strUID, String strApkNo, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "LoadQuestionInfo");
        soapReq.addProperty("QuestionID", questionID);
        soapReq.addProperty("strMsg", strMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("strUID", strUID);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/LoadQuestionInfo", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/LoadQuestionInfo", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void EditQuestionAsync(String strUID, String questionID, String strQuestion,
                                  String strAnswer, String strOperatePwd, String strMsg, String strAuthorizationCode,
                                  String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        EditQuestionAsync(strUID, questionID, strQuestion, strAnswer, strOperatePwd, strMsg,
                strAuthorizationCode, strApkNo, null);
    }

    public void EditQuestionAsync(final String strUID, final String questionID,
                                  final String strQuestion, final String strAnswer, final String strOperatePwd,
                                  final String strMsg, final String strAuthorizationCode, final String strApkNo,
                                  final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return EditQuestion(strUID, questionID, strQuestion, strAnswer, strOperatePwd,
                        strMsg, strAuthorizationCode, strApkNo, headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("EditQuestion", result);
                }
            }
        }.execute();
    }

    public String EditQuestion(String strUID, String questionID, String strQuestion,
                               String strAnswer, String strOperatePwd, String strMsg, String strAuthorizationCode,
                               String strApkNo) {
        return EditQuestion(strUID, questionID, strQuestion, strAnswer, strOperatePwd, strMsg,
                strAuthorizationCode, strApkNo, null);
    }

    public String EditQuestion(String strUID, String questionID, String strQuestion,
                               String strAnswer, String strOperatePwd, String strMsg, String strAuthorizationCode,
                               String strApkNo, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "EditQuestion");
        soapReq.addProperty("strUID", strUID);
        soapReq.addProperty("QuestionID", questionID);
        soapReq.addProperty("strQuestion", strQuestion);
        soapReq.addProperty("strAnswer", strAnswer);
        soapReq.addProperty("strOperatePwd", strOperatePwd);
        soapReq.addProperty("strMsg", strMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/EditQuestion", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/EditQuestion", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void DeleteQuestionAsync(String questionID, String strMsg, String strAuthorizationCode,
                                    String strUID, String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        DeleteQuestionAsync(questionID, strMsg, strAuthorizationCode, strUID, strApkNo, null);
    }

    public void DeleteQuestionAsync(final String questionID, final String strMsg,
                                    final String strAuthorizationCode, final String strUID, final String strApkNo,
                                    final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return DeleteQuestion(questionID, strMsg, strAuthorizationCode, strUID, strApkNo,
                        headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("DeleteQuestion", result);
                }
            }
        }.execute();
    }

    public String DeleteQuestion(String questionID, String strMsg, String strAuthorizationCode,
                                 String strUID, String strApkNo) {
        return DeleteQuestion(questionID, strMsg, strAuthorizationCode, strUID, strApkNo, null);
    }

    public String DeleteQuestion(String questionID, String strMsg, String strAuthorizationCode,
                                 String strUID, String strApkNo, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "DeleteQuestion");
        soapReq.addProperty("QuestionID", questionID);
        soapReq.addProperty("strMsg", strMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("strUID", strUID);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/DeleteQuestion", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/DeleteQuestion", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void GetShopInfoByUIDAsync(String uID, String signMsg, String strAuthorizationCode,
                                      String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetShopInfoByUIDAsync(uID, signMsg, strAuthorizationCode, strApkNo, null);
    }

    public void GetShopInfoByUIDAsync(final String uID, final String signMsg,
                                      final String strAuthorizationCode, final String strApkNo,
                                      final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return GetShopInfoByUID(uID, signMsg, strAuthorizationCode, strApkNo, headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("GetShopInfoByUID", result);
                }
            }
        }.execute();
    }

    public String GetShopInfoByUID(String uID, String signMsg, String strAuthorizationCode,
                                   String strApkNo) {
        return GetShopInfoByUID(uID, signMsg, strAuthorizationCode, strApkNo, null);
    }

    public String GetShopInfoByUID(String uID, String signMsg, String strAuthorizationCode,
                                   String strApkNo, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "GetShopInfoByUID");
        soapReq.addProperty("uID", uID);
        soapReq.addProperty("signMsg", signMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/GetShopInfoByUID", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/GetShopInfoByUID", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void InitPageOrderSaleTypeAsync(String intRandom, String strSign,
                                           String strAuthorizationCode, String varUID, String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        InitPageOrderSaleTypeAsync(intRandom, strSign, strAuthorizationCode, varUID, strApkNo, null);
    }

    public void InitPageOrderSaleTypeAsync(final String intRandom, final String strSign,
                                           final String strAuthorizationCode, final String varUID, final String strApkNo,
                                           final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return InitPageOrderSaleType(intRandom, strSign, strAuthorizationCode, varUID,
                        strApkNo, headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("InitPageOrderSaleType", result);
                }
            }
        }.execute();
    }

    public String InitPageOrderSaleType(String intRandom, String strSign,
                                        String strAuthorizationCode, String varUID, String strApkNo) {
        return InitPageOrderSaleType(intRandom, strSign, strAuthorizationCode, varUID, strApkNo,
                null);
    }

    public String InitPageOrderSaleType(String intRandom, String strSign,
                                        String strAuthorizationCode, String varUID, String strApkNo,
                                        List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "InitPageOrderSaleType");
        soapReq.addProperty("intRandom", intRandom);
        soapReq.addProperty("strSign", strSign);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("varUID", varUID);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/InitPageOrderSaleType", soapEnvelope,
                        headers);
            } else {
                httpTransport.call("http://tempuri.org/InitPageOrderSaleType", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void UserGradeUpdateNoStockAsync(String orderType, String varBranch, String varUserID,
                                            String varShopUID, String varShopUserID, String varReceiveMan, String intProvince,
                                            String intCity, String intCounty, String varReceiveAddress, String varPhone,
                                            String varZipCode, String varMemo, String varWarehouseID, String mnyTotalMoney,
                                            String mnyTotalPV, String varProductNOs, String intQTYs, String mnyPrices,
                                            String mnyPVs, String strOpterMan, String varOperatPWD, String strSign,
                                            String strAuthorizationCode, String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        UserGradeUpdateNoStockAsync(orderType, varBranch, varUserID, varShopUID, varShopUserID,
                varReceiveMan, intProvince, intCity, intCounty, varReceiveAddress, varPhone,
                varZipCode, varMemo, varWarehouseID, mnyTotalMoney, mnyTotalPV, varProductNOs,
                intQTYs, mnyPrices, mnyPVs, strOpterMan, varOperatPWD, strSign,
                strAuthorizationCode, strApkNo, null);
    }

    public void UserGradeUpdateNoStockAsync(final String orderType, final String varBranch,
                                            final String varUserID, final String varShopUID, final String varShopUserID,
                                            final String varReceiveMan, final String intProvince, final String intCity,
                                            final String intCounty, final String varReceiveAddress, final String varPhone,
                                            final String varZipCode, final String varMemo, final String varWarehouseID,
                                            final String mnyTotalMoney, final String mnyTotalPV, final String varProductNOs,
                                            final String intQTYs, final String mnyPrices, final String mnyPVs,
                                            final String strOpterMan, final String varOperatPWD, final String strSign,
                                            final String strAuthorizationCode, final String strApkNo,
                                            final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return UserGradeUpdateNoStock(orderType, varBranch, varUserID, varShopUID,
                        varShopUserID, varReceiveMan, intProvince, intCity, intCounty,
                        varReceiveAddress, varPhone, varZipCode, varMemo, varWarehouseID,
                        mnyTotalMoney, mnyTotalPV, varProductNOs, intQTYs, mnyPrices, mnyPVs,
                        strOpterMan, varOperatPWD, strSign, strAuthorizationCode, strApkNo, headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("UserGradeUpdateNoStock", result);
                }
            }
        }.execute();
    }

    public String UserGradeUpdateNoStock(String orderType, String varBranch, String varUserID,
                                         String varShopUID, String varShopUserID, String varReceiveMan, String intProvince,
                                         String intCity, String intCounty, String varReceiveAddress, String varPhone,
                                         String varZipCode, String varMemo, String varWarehouseID, String mnyTotalMoney,
                                         String mnyTotalPV, String varProductNOs, String intQTYs, String mnyPrices,
                                         String mnyPVs, String strOpterMan, String varOperatPWD, String strSign,
                                         String strAuthorizationCode, String strApkNo) {
        return UserGradeUpdateNoStock(orderType, varBranch, varUserID, varShopUID, varShopUserID,
                varReceiveMan, intProvince, intCity, intCounty, varReceiveAddress, varPhone,
                varZipCode, varMemo, varWarehouseID, mnyTotalMoney, mnyTotalPV, varProductNOs,
                intQTYs, mnyPrices, mnyPVs, strOpterMan, varOperatPWD, strSign,
                strAuthorizationCode, strApkNo, null);
    }

    public String UserGradeUpdateNoStock(String orderType, String varBranch, String varUserID,
                                         String varShopUID, String varShopUserID, String varReceiveMan, String intProvince,
                                         String intCity, String intCounty, String varReceiveAddress, String varPhone,
                                         String varZipCode, String varMemo, String varWarehouseID, String mnyTotalMoney,
                                         String mnyTotalPV, String varProductNOs, String intQTYs, String mnyPrices,
                                         String mnyPVs, String strOpterMan, String varOperatPWD, String strSign,
                                         String strAuthorizationCode, String strApkNo, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "UserGradeUpdateNoStock");
        soapReq.addProperty("orderType", orderType);
        soapReq.addProperty("varBranch", varBranch);
        soapReq.addProperty("varUserID", varUserID);
        soapReq.addProperty("varShopUID", varShopUID);
        soapReq.addProperty("varShopUserID", varShopUserID);
        soapReq.addProperty("varReceiveMan", varReceiveMan);
        soapReq.addProperty("intProvince", intProvince);
        soapReq.addProperty("intCity", intCity);
        soapReq.addProperty("intCounty", intCounty);
        soapReq.addProperty("varReceiveAddress", varReceiveAddress);
        soapReq.addProperty("varPhone", varPhone);
        soapReq.addProperty("varZipCode", varZipCode);
        soapReq.addProperty("varMemo", varMemo);
        soapReq.addProperty("varWarehouseID", varWarehouseID);
        soapReq.addProperty("mnyTotalMoney", mnyTotalMoney);
        soapReq.addProperty("mnyTotalPV", mnyTotalPV);
        soapReq.addProperty("varProductNOs", varProductNOs);
        soapReq.addProperty("intQTYs", intQTYs);
        soapReq.addProperty("mnyPrices", mnyPrices);
        soapReq.addProperty("mnyPVs", mnyPVs);
        soapReq.addProperty("strOpterMan", strOpterMan);
        soapReq.addProperty("varOperatPWD", varOperatPWD);
        soapReq.addProperty("strSign", strSign);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/UserGradeUpdateNoStock", soapEnvelope,
                        headers);
            } else {
                httpTransport.call("http://tempuri.org/UserGradeUpdateNoStock", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void UserGradeUpdateAsync(String strWalletType, String orderType, String varBranch,
                                     String varUserID, String varShopUID, String varShopUserID, String varReceiveMan,
                                     String intProvince, String intCity, String intCounty, String varReceiveAddress,
                                     String varPhone, String varZipCode, String varMemo, String varWarehouseID,
                                     String mnyTotalMoney, String mnyTotalPV, String varProductNOs, String intQTYs,String intQTYsReward,
                                     String mnyPrices, String mnyPVs, String strOpterMan, String varOperatPWD,
                                     String strSign, String strAuthorizationCode, String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        UserGradeUpdateAsync(strWalletType, orderType, varBranch, varUserID, varShopUID,
                varShopUserID, varReceiveMan, intProvince, intCity, intCounty, varReceiveAddress,
                varPhone, varZipCode, varMemo, varWarehouseID, mnyTotalMoney, mnyTotalPV,
                varProductNOs, intQTYs,intQTYsReward, mnyPrices, mnyPVs, strOpterMan, varOperatPWD, strSign,
                strAuthorizationCode, strApkNo, null);
    }

    public void UserGradeUpdateAsync(final String strWalletType, final String orderType,
                                     final String varBranch, final String varUserID, final String varShopUID,
                                     final String varShopUserID, final String varReceiveMan, final String intProvince,
                                     final String intCity, final String intCounty, final String varReceiveAddress,
                                     final String varPhone, final String varZipCode, final String varMemo,
                                     final String varWarehouseID, final String mnyTotalMoney, final String mnyTotalPV,
                                     final String varProductNOs, final String intQTYs,final String intQTYsReward, final String mnyPrices,
                                     final String mnyPVs, final String strOpterMan, final String varOperatPWD,
                                     final String strSign, final String strAuthorizationCode, final String strApkNo,
                                     final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return UserGradeUpdate(strWalletType, orderType, varBranch, varUserID, varShopUID,
                        varShopUserID, varReceiveMan, intProvince, intCity, intCounty,
                        varReceiveAddress, varPhone, varZipCode, varMemo, varWarehouseID,
                        mnyTotalMoney, mnyTotalPV, varProductNOs, intQTYs,intQTYsReward, mnyPrices, mnyPVs,
                        strOpterMan, varOperatPWD, strSign, strAuthorizationCode, strApkNo, headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("UserGradeUpdate", result);
                }
            }
        }.execute();
    }

    public String UserGradeUpdate(String strWalletType, String orderType, String varBranch,
                                  String varUserID, String varShopUID, String varShopUserID, String varReceiveMan,
                                  String intProvince, String intCity, String intCounty, String varReceiveAddress,
                                  String varPhone, String varZipCode, String varMemo, String varWarehouseID,
                                  String mnyTotalMoney, String mnyTotalPV, String varProductNOs, String intQTYs,String intQTYsReward,
                                  String mnyPrices, String mnyPVs, String strOpterMan, String varOperatPWD,
                                  String strSign, String strAuthorizationCode, String strApkNo) {
        return UserGradeUpdate(strWalletType, orderType, varBranch, varUserID, varShopUID,
                varShopUserID, varReceiveMan, intProvince, intCity, intCounty, varReceiveAddress,
                varPhone, varZipCode, varMemo, varWarehouseID, mnyTotalMoney, mnyTotalPV,
                varProductNOs, intQTYs,intQTYsReward, mnyPrices, mnyPVs, strOpterMan, varOperatPWD, strSign,
                strAuthorizationCode, strApkNo, null);
    }

    public String UserGradeUpdate(String strWalletType, String orderType, String varBranch,
                                  String varUserID, String varShopUID, String varShopUserID, String varReceiveMan,
                                  String intProvince, String intCity, String intCounty, String varReceiveAddress,
                                  String varPhone, String varZipCode, String varMemo, String varWarehouseID,
                                  String mnyTotalMoney, String mnyTotalPV, String varProductNOs, String intQTYs,String intQTYsReward,
                                  String mnyPrices, String mnyPVs, String strOpterMan, String varOperatPWD,
                                  String strSign, String strAuthorizationCode, String strApkNo,
                                  List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "UserGradeUpdate");
        soapReq.addProperty("strWalletType", strWalletType);
        soapReq.addProperty("orderType", orderType);
        soapReq.addProperty("varBranch", varBranch);
        soapReq.addProperty("varUserID", varUserID);
        soapReq.addProperty("varShopUID", varShopUID);
        soapReq.addProperty("varShopUserID", varShopUserID);
        soapReq.addProperty("varReceiveMan", varReceiveMan);
        soapReq.addProperty("intProvince", intProvince);
        soapReq.addProperty("intCity", intCity);
        soapReq.addProperty("intCounty", intCounty);
        soapReq.addProperty("varReceiveAddress", varReceiveAddress);
        soapReq.addProperty("varPhone", varPhone);
        soapReq.addProperty("varZipCode", varZipCode);
        soapReq.addProperty("varMemo", varMemo);
        soapReq.addProperty("varWarehouseID", varWarehouseID);
        soapReq.addProperty("mnyTotalMoney", mnyTotalMoney);
        soapReq.addProperty("mnyTotalPV", mnyTotalPV);
        soapReq.addProperty("varProductNOs", varProductNOs);
        soapReq.addProperty("intQTYs", intQTYs);
        soapReq.addProperty("intQTYsReward", intQTYsReward);
        soapReq.addProperty("mnyPrices", mnyPrices);
        soapReq.addProperty("mnyPVs", mnyPVs);
        soapReq.addProperty("strOpterMan", strOpterMan);
        soapReq.addProperty("varOperatPWD", varOperatPWD);
        soapReq.addProperty("strSign", strSign);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/UserGradeUpdate", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/UserGradeUpdate", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void SearchShopStoreAsync(String strUID, String intPageSize, String intPageIndex,
                                     String strMsg, String strAuthorizationCode, String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        SearchShopStoreAsync(strUID, intPageSize, intPageIndex, strMsg, strAuthorizationCode,
                strApkNo, null);
    }

    public void SearchShopStoreAsync(final String strUID, final String intPageSize,
                                     final String intPageIndex, final String strMsg, final String strAuthorizationCode,
                                     final String strApkNo, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return SearchShopStore(strUID, intPageSize, intPageIndex, strMsg,
                        strAuthorizationCode, strApkNo, headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("SearchShopStore", result);
                }
            }
        }.execute();
    }

    public String SearchShopStore(String strUID, String intPageSize, String intPageIndex,
                                  String strMsg, String strAuthorizationCode, String strApkNo) {
        return SearchShopStore(strUID, intPageSize, intPageIndex, strMsg, strAuthorizationCode,
                strApkNo, null);
    }

    public String SearchShopStore(String strUID, String intPageSize, String intPageIndex,
                                  String strMsg, String strAuthorizationCode, String strApkNo,
                                  List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "SearchShopStore");
        soapReq.addProperty("strUID", strUID);
        soapReq.addProperty("intPageSize", intPageSize);
        soapReq.addProperty("intPageIndex", intPageIndex);
        soapReq.addProperty("strMsg", strMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/SearchShopStore", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/SearchShopStore", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void SearchDiffOrderAsync(String strUserId, String strPartCode, String strOrderNO,
                                     String strOrderStatus, String strMsg, String strAuthorizationCode, String strApkNo)
            throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        SearchDiffOrderAsync(strUserId, strPartCode, strOrderNO, strOrderStatus, strMsg,
                strAuthorizationCode, strApkNo, null);
    }

    public void SearchDiffOrderAsync(final String strUserId, final String strPartCode,
                                     final String strOrderNO, final String strOrderStatus, final String strMsg,
                                     final String strAuthorizationCode, final String strApkNo,
                                     final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return SearchDiffOrder(strUserId, strPartCode, strOrderNO, strOrderStatus, strMsg,
                        strAuthorizationCode, strApkNo, headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("SearchDiffOrder", result);
                }
            }
        }.execute();
    }

    public String SearchDiffOrder(String strUserId, String strPartCode, String strOrderNO,
                                  String strOrderStatus, String strMsg, String strAuthorizationCode, String strApkNo) {
        return SearchDiffOrder(strUserId, strPartCode, strOrderNO, strOrderStatus, strMsg,
                strAuthorizationCode, strApkNo, null);
    }

    public String SearchDiffOrder(String strUserId, String strPartCode, String strOrderNO,
                                  String strOrderStatus, String strMsg, String strAuthorizationCode, String strApkNo,
                                  List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "SearchDiffOrder");
        soapReq.addProperty("strUserId", strUserId);
        soapReq.addProperty("strPartCode", strPartCode);
        soapReq.addProperty("strOrderNO", strOrderNO);
        soapReq.addProperty("strOrderStatus", strOrderStatus);
        soapReq.addProperty("strMsg", strMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/SearchDiffOrder", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/SearchDiffOrder", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void SearchDiffOrderDetailAsync(String strPartCode, String strMsg,
                                           String strAuthorizationCode, String varUID, String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        SearchDiffOrderDetailAsync(strPartCode, strMsg, strAuthorizationCode, varUID, strApkNo,
                null);
    }

    public void SearchDiffOrderDetailAsync(final String strPartCode, final String strMsg,
                                           final String strAuthorizationCode, final String varUID, final String strApkNo,
                                           final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return SearchDiffOrderDetail(strPartCode, strMsg, strAuthorizationCode, varUID,
                        strApkNo, headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("SearchDiffOrderDetail", result);
                }
            }
        }.execute();
    }

    public String SearchDiffOrderDetail(String strPartCode, String strMsg,
                                        String strAuthorizationCode, String varUID, String strApkNo) {
        return SearchDiffOrderDetail(strPartCode, strMsg, strAuthorizationCode, varUID, strApkNo,
                null);
    }

    public String SearchDiffOrderDetail(String strPartCode, String strMsg,
                                        String strAuthorizationCode, String varUID, String strApkNo,
                                        List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "SearchDiffOrderDetail");
        soapReq.addProperty("strPartCode", strPartCode);
        soapReq.addProperty("strMsg", strMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("varUID", varUID);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/SearchDiffOrderDetail", soapEnvelope,
                        headers);
            } else {
                httpTransport.call("http://tempuri.org/SearchDiffOrderDetail", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void InitPageForReturnCompanyAsync(String intRandom, String strMsg,
                                              String strAuthorizationCode, String varUID, String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        InitPageForReturnCompanyAsync(intRandom, strMsg, strAuthorizationCode, varUID, strApkNo,
                null);
    }

    public void InitPageForReturnCompanyAsync(final String intRandom, final String strMsg,
                                              final String strAuthorizationCode, final String varUID, final String strApkNo,
                                              final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return InitPageForReturnCompany(intRandom, strMsg, strAuthorizationCode, varUID,
                        strApkNo, headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("InitPageForReturnCompany", result);
                }
            }
        }.execute();
    }

    public String InitPageForReturnCompany(String intRandom, String strMsg,
                                           String strAuthorizationCode, String varUID, String strApkNo) {
        return InitPageForReturnCompany(intRandom, strMsg, strAuthorizationCode, varUID, strApkNo,
                null);
    }

    public String InitPageForReturnCompany(String intRandom, String strMsg,
                                           String strAuthorizationCode, String varUID, String strApkNo,
                                           List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "InitPageForReturnCompany");
        soapReq.addProperty("intRandom", intRandom);
        soapReq.addProperty("strMsg", strMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("varUID", varUID);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/InitPageForReturnCompany", soapEnvelope,
                        headers);
            } else {
                httpTransport.call("http://tempuri.org/InitPageForReturnCompany", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void SearchPageReturnCompanyAsync(String strUserId, String strOrderNo,
                                             String strOrderType, String intPageSize, String intPageIndex, String strMsg,
                                             String strAuthorizationCode, String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        SearchPageReturnCompanyAsync(strUserId, strOrderNo, strOrderType, intPageSize,
                intPageIndex, strMsg, strAuthorizationCode, strApkNo, null);
    }

    public void SearchPageReturnCompanyAsync(final String strUserId, final String strOrderNo,
                                             final String strOrderType, final String intPageSize, final String intPageIndex,
                                             final String strMsg, final String strAuthorizationCode, final String strApkNo,
                                             final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return SearchPageReturnCompany(strUserId, strOrderNo, strOrderType, intPageSize,
                        intPageIndex, strMsg, strAuthorizationCode, strApkNo, headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("SearchPageReturnCompany", result);
                }
            }
        }.execute();
    }

    public String SearchPageReturnCompany(String strUserId, String strOrderNo, String strOrderType,
                                          String intPageSize, String intPageIndex, String strMsg, String strAuthorizationCode,
                                          String strApkNo) {
        return SearchPageReturnCompany(strUserId, strOrderNo, strOrderType, intPageSize,
                intPageIndex, strMsg, strAuthorizationCode, strApkNo, null);
    }

    public String SearchPageReturnCompany(String strUserId, String strOrderNo, String strOrderType,
                                          String intPageSize, String intPageIndex, String strMsg, String strAuthorizationCode,
                                          String strApkNo, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "SearchPageReturnCompany");
        soapReq.addProperty("strUserId", strUserId);
        soapReq.addProperty("strOrderNo", strOrderNo);
        soapReq.addProperty("strOrderType", strOrderType);
        soapReq.addProperty("intPageSize", intPageSize);
        soapReq.addProperty("intPageIndex", intPageIndex);
        soapReq.addProperty("strMsg", strMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/SearchPageReturnCompany", soapEnvelope,
                        headers);
            } else {
                httpTransport.call("http://tempuri.org/SearchPageReturnCompany", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void ApplyReturnCompanyAsync(String strOrderNo, String strMsg,
                                        String strAuthorizationCode, String varUID, String strApkNo) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        ApplyReturnCompanyAsync(strOrderNo, strMsg, strAuthorizationCode, varUID, strApkNo, null);
    }

    public void ApplyReturnCompanyAsync(final String strOrderNo, final String strMsg,
                                        final String strAuthorizationCode, final String varUID, final String strApkNo,
                                        final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return ApplyReturnCompany(strOrderNo, strMsg, strAuthorizationCode, varUID,
                        strApkNo, headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("ApplyReturnCompany", result);
                }
            }
        }.execute();
    }

    public String ApplyReturnCompany(String strOrderNo, String strMsg, String strAuthorizationCode,
                                     String varUID, String strApkNo) {
        return ApplyReturnCompany(strOrderNo, strMsg, strAuthorizationCode, varUID, strApkNo, null);
    }

    public String ApplyReturnCompany(String strOrderNo, String strMsg, String strAuthorizationCode,
                                     String varUID, String strApkNo, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "ApplyReturnCompany");
        soapReq.addProperty("strOrderNo", strOrderNo);
        soapReq.addProperty("strMsg", strMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("varUID", varUID);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/ApplyReturnCompany", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/ApplyReturnCompany", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public void OrderAddAsync(String varShopID, String varWarehouseID, String varReceiveMan,
                              String intProvince, String intCity, String intCounty, String varReceiveAddress,
                              String varSpareContacts, String varSparePhone, String varPhone, String varZipCode,
                              String varMemo, String varProductNOs, String intPaymentQTYs, String intIntegralQTYs,
                              String varOperatPWD, String signMsg, String strAuthorizationCode, String strApkNo)
            throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        OrderAddAsync(varShopID, varWarehouseID, varReceiveMan, intProvince, intCity, intCounty,
                varReceiveAddress, varSpareContacts, varSparePhone, varPhone, varZipCode, varMemo,
                varProductNOs, intPaymentQTYs, intIntegralQTYs, varOperatPWD, signMsg,
                strAuthorizationCode, strApkNo, null);
    }

    public void OrderAddAsync(final String varShopID, final String varWarehouseID,
                              final String varReceiveMan, final String intProvince, final String intCity,
                              final String intCounty, final String varReceiveAddress, final String varSpareContacts,
                              final String varSparePhone, final String varPhone, final String varZipCode,
                              final String varMemo, final String varProductNOs, final String intPaymentQTYs,
                              final String intIntegralQTYs, final String varOperatPWD, final String signMsg,
                              final String strAuthorizationCode, final String strApkNo,
                              final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return OrderAdd(varShopID, varWarehouseID, varReceiveMan, intProvince, intCity,
                        intCounty, varReceiveAddress, varSpareContacts, varSparePhone, varPhone,
                        varZipCode, varMemo, varProductNOs, intPaymentQTYs, intIntegralQTYs,
                        varOperatPWD, signMsg, strAuthorizationCode, strApkNo, headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("OrderAdd", result);
                }
            }
        }.execute();
    }

    public String OrderAdd(String varShopID, String varWarehouseID, String varReceiveMan,
                           String intProvince, String intCity, String intCounty, String varReceiveAddress,
                           String varSpareContacts, String varSparePhone, String varPhone, String varZipCode,
                           String varMemo, String varProductNOs, String intPaymentQTYs, String intIntegralQTYs,
                           String varOperatPWD, String signMsg, String strAuthorizationCode, String strApkNo) {
        return OrderAdd(varShopID, varWarehouseID, varReceiveMan, intProvince, intCity, intCounty,
                varReceiveAddress, varSpareContacts, varSparePhone, varPhone, varZipCode, varMemo,
                varProductNOs, intPaymentQTYs, intIntegralQTYs, varOperatPWD, signMsg,
                strAuthorizationCode, strApkNo, null);
    }

    public String OrderAdd(String varShopID, String varWarehouseID, String varReceiveMan,
                           String intProvince, String intCity, String intCounty, String varReceiveAddress,
                           String varSpareContacts, String varSparePhone, String varPhone, String varZipCode,
                           String varMemo, String varProductNOs, String intPaymentQTYs, String intIntegralQTYs,
                           String varOperatPWD, String signMsg, String strAuthorizationCode, String strApkNo,
                           List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "OrderAdd");
        soapReq.addProperty("varShopID", varShopID);
        soapReq.addProperty("varWarehouseID", varWarehouseID);
        soapReq.addProperty("varReceiveMan", varReceiveMan);
        soapReq.addProperty("intProvince", intProvince);
        soapReq.addProperty("intCity", intCity);
        soapReq.addProperty("intCounty", intCounty);
        soapReq.addProperty("varReceiveAddress", varReceiveAddress);

        soapReq.addProperty("varSpareContacts", varSpareContacts);
        soapReq.addProperty("varSparePhone", varSparePhone);

        soapReq.addProperty("varPhone", varPhone);
        soapReq.addProperty("varZipCode", varZipCode);
        soapReq.addProperty("varMemo", varMemo);
        soapReq.addProperty("varProductNOs", varProductNOs);
        soapReq.addProperty("intPaymentQTYs", intPaymentQTYs);
        soapReq.addProperty("intIntegralQTYs", intIntegralQTYs);
        soapReq.addProperty("varOperatPWD", varOperatPWD);
        soapReq.addProperty("signMsg", signMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/OrderAdd", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/OrderAdd", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public String GetWayBillInfo(String strWayBill, String strExpressNO, String strAddre,
                                 String strMsg, String strAuthorizationCode, String varUID, String strApkNo,
                                 List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "GetWayBillInfo");
        soapReq.addProperty("strWayBill", strWayBill);
        soapReq.addProperty("strExpressNO", strExpressNO);
        soapReq.addProperty("strAddre", strAddre);
        soapReq.addProperty("strMsg", strMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("varUID", varUID);
        soapReq.addProperty("strApkNo", strApkNo);

        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/GetWayBillInfo", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/GetWayBillInfo", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public String GetNoSignCount(String varUserID, String strMsg, String strAuthorizationCode,
                                 String strApkNo, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "GetNoSignCount");
        soapReq.addProperty("varUserID", varUserID);
        soapReq.addProperty("strMsg", strMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/GetNoSignCount", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/GetNoSignCount", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public String GetUnSignOrders(String varUserID, String strOrderType, String strOrderNO,
                                  String strpageSize, String strpageIndex, String strMsg, String strAuthorizationCode,
                                  String strApkNo, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "GetUnSignOrders");
        soapReq.addProperty("varUserID", varUserID);
        soapReq.addProperty("strOrderType", strOrderType);
        soapReq.addProperty("strOrderNO", strOrderNO);
        soapReq.addProperty("strpageSize", strpageSize);
        soapReq.addProperty("strpageIndex", strpageIndex);
        soapReq.addProperty("strMsg", strMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/GetUnSignOrders", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/GetUnSignOrders", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public String SignOrder(String varUserID, String varCarCode, String strMsg,
                            String strAuthorizationCode, String strApkNo, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "SignOrder");
        soapReq.addProperty("varUserID", varUserID);
        soapReq.addProperty("varCarCode", varCarCode);
        soapReq.addProperty("strMsg", strMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/SignOrder", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/SignOrder", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public String TransferApplyByTicket(String varBranch, String tranInVarUserID,
                                        String tranOutVarUID, String tranOutVarUserID, String mnyMoney, String varDescription,
                                        String varOperatPWD, String signMsg, String strAuthorizationCode, String strApkNo,
                                        List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "TransferApplyByTicket");
        soapReq.addProperty("varBranch", varBranch);
        soapReq.addProperty("tranInVarUserID", tranInVarUserID);
        soapReq.addProperty("tranOutVarUID", tranOutVarUID);
        soapReq.addProperty("tranOutVarUserID", tranOutVarUserID);
        soapReq.addProperty("mnyMoney", mnyMoney);
        soapReq.addProperty("varDescription", varDescription);
        soapReq.addProperty("varOperatPWD", varOperatPWD);
        soapReq.addProperty("signMsg", signMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/TransferApplyByTicket", soapEnvelope,
                        headers);
            } else {
                httpTransport.call("http://tempuri.org/TransferApplyByTicket", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public String TurnLotteryToMobile(String strUID, String iTurnLottery, String strUserID,
                                      String strOperatePwd, String strMsg, String strAuthorizationCode, String strApkNo,
                                      List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "TurnLotteryToMobile");
        soapReq.addProperty("strUID", strUID);
        soapReq.addProperty("iTurnLottery", iTurnLottery);
        soapReq.addProperty("strUserID", strUserID);
        soapReq.addProperty("strOperatePwd", strOperatePwd);
        soapReq.addProperty("strMsg", strMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/TurnLotteryToMobile", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/TurnLotteryToMobile", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

    public String TerritorialRegistrationSave(String strUID, String chrSex, int intDomicileProvince, int intDomicileCity, int intDomicileCounty
            , int intResidentProvince, int intResidentCity, int intResidentCounty, int intWorkProvince1, int intWorkCity1
            , int intWorkCounty1, int intWorkProvince2, int intWorkCity2, int intWorkCounty2,
                                              int intWorkProvince3, int intWorkCity3, int intWorkCounty3,
                                              String signMsg, String strAuthorizationCode, String strApkNo,
                                              List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = createSoapSerializationEnvelope();
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/", "TerritorialRegistrationSave");
        soapReq.addProperty("strUID", strUID);
        soapReq.addProperty("chrSex", chrSex);
        soapReq.addProperty("intDomicileProvince", intDomicileProvince);
        soapReq.addProperty("intDomicileCity", intDomicileCity);
        soapReq.addProperty("intDomicileCounty", intDomicileCounty);
        soapReq.addProperty("intResidentProvince", intResidentProvince);
        soapReq.addProperty("intResidentCity", intResidentCity);
        soapReq.addProperty("intResidentCounty", intResidentCounty);
        soapReq.addProperty("intWorkProvince1", intWorkProvince1);
        soapReq.addProperty("intWorkCity1", intWorkCity1);
        soapReq.addProperty("intWorkCounty1", intWorkCounty1);
        soapReq.addProperty("intWorkProvince2", intWorkProvince2);
        soapReq.addProperty("intWorkCity2", intWorkCity2);
        soapReq.addProperty("intWorkCounty2", intWorkCounty2);
        soapReq.addProperty("intWorkProvince3", intWorkProvince3);
        soapReq.addProperty("intWorkCity3", intWorkCity3);
        soapReq.addProperty("intWorkCounty3", intWorkCounty3);
        soapReq.addProperty("signMsg", signMsg);
        soapReq.addProperty("strAuthorizationCode", strAuthorizationCode);
        soapReq.addProperty("strApkNo", strApkNo);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://tempuri.org/TerritorialRegistrationSave", soapEnvelope, headers);
            } else {
                httpTransport.call("http://tempuri.org/TerritorialRegistrationSave", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }
}
